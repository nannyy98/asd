"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

from keyboards import create_admin_keyboard, create_main_keyboard, create_back_keyboard
from utils import format_price, format_date, get_order_status_emoji, get_order_status_text

class AdminHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.admin_states = {}
        self.notification_manager = None
    
    def handle_admin_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data or not user_data[0][6]:  # is_admin
                self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            if text in ['üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º', 'üè† –ì–ª–∞–≤–Ω–∞—è']:
                self.exit_admin_mode(chat_id, telegram_id)
                return
            elif text in ['üîô –ù–∞–∑–∞–¥']:
                self.handle_admin_back(chat_id, telegram_id)
                return
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
            if text == '/admin' or text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                self.show_admin_panel(chat_id)
            elif text == 'üì¶ –ó–∞–∫–∞–∑—ã':
                self.show_orders_management(chat_id)
            elif text == 'üõ† –¢–æ–≤–∞—Ä—ã':
                self.show_products_management(chat_id)
            elif text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
                self.show_users_stats(chat_id)
            elif text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
                self.show_analytics_menu(chat_id)
            elif text == 'üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
                self.show_security_stats(chat_id)
            elif text == 'üí∞ –§–∏–Ω–∞–Ω—Å—ã':
                self.show_financial_stats(chat_id)
            elif text == 'üì¶ –°–∫–ª–∞–¥':
                self.show_inventory_stats(chat_id)
            elif text == 'ü§ñ AI':
                self.show_ai_features(chat_id)
            elif text == 'üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è':
                self.show_automation_stats(chat_id)
            elif text == 'üë• CRM':
                self.show_crm_stats(chat_id)
            elif text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
                self.show_broadcast_menu(chat_id)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                state = self.admin_states.get(telegram_id, '')
                if state.startswith('adding_product_'):
                    self.handle_add_product_process(message)
                elif state.startswith('creating_broadcast_'):
                    self.handle_broadcast_creation(message)
                else:
                    self.show_admin_panel(chat_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã: {e}")
            self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    
    def handle_admin_back(self, chat_id, telegram_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        current_state = self.admin_states.get(telegram_id, '')
        
        if current_state:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
            del self.admin_states[telegram_id]
        
        self.show_admin_panel(chat_id)
    
    def show_admin_panel(self, chat_id):
        """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        stats = self.get_basic_stats()
        
        admin_text = f"üõ° <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        admin_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        admin_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        admin_text += f"üõç –¢–æ–≤–∞—Ä–æ–≤: {stats['products']}\n"
        admin_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['orders']}\n"
        admin_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(stats['revenue'])}\n\n"
        admin_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, admin_text, keyboard)
    
    def get_basic_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            users_count = self.db.execute_query('SELECT COUNT(*) FROM users WHERE is_admin = 0')[0][0]
            products_count = self.db.execute_query('SELECT COUNT(*) FROM products WHERE is_active = 1')[0][0]
            orders_count = self.db.execute_query('SELECT COUNT(*) FROM orders')[0][0]
            revenue = self.db.execute_query('SELECT SUM(total_amount) FROM orders WHERE status != "cancelled"')[0][0] or 0
            
            return {
                'users': users_count,
                'products': products_count,
                'orders': orders_count,
                'revenue': revenue
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'users': 0, 'products': 0, 'orders': 0, 'revenue': 0}
    
    def show_orders_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
        recent_orders = self.db.execute_query('''
            SELECT o.id, o.total_amount, o.status, o.created_at, u.name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        
        if not recent_orders:
            no_orders_text = "üì¶ <b>–ó–∞–∫–∞–∑—ã</b>\n\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            keyboard = create_admin_keyboard()
            self.bot.send_message(chat_id, no_orders_text, keyboard)
            return
        
        orders_text = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        
        for order in recent_orders:
            status_emoji = get_order_status_emoji(order[2])
            status_text = get_order_status_text(order[2])
            orders_text += f"{status_emoji} #{order[0]} - {format_price(order[1])}\n"
            orders_text += f"üë§ {order[4]}\n"
            orders_text += f"üìä {status_text}\n"
            orders_text += f"üìÖ {format_date(order[3])}\n"
            orders_text += f"üëÜ /admin_order_{order[0]} - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, orders_text, keyboard)
    
    def show_products_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
        products = self.db.execute_query('''
            SELECT id, name, price, stock, is_active
            FROM products
            ORDER BY created_at DESC
            LIMIT 10
        ''')
        
        if not products:
            no_products_text = "üõç <b>–¢–æ–≤–∞—Ä—ã</b>\n\n–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            keyboard = create_admin_keyboard()
            self.bot.send_message(chat_id, no_products_text, keyboard)
            return
        
        products_text = "üõç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:</b>\n\n"
        
        for product in products:
            status = "‚úÖ" if product[4] else "‚ùå"
            stock_status = "üì¶" if product[3] > 5 else "‚ö†Ô∏è" if product[3] > 0 else "üî¥"
            
            products_text += f"{status} <b>{product[1]}</b>\n"
            products_text += f"üí∞ {format_price(product[2])} | {stock_status} {product[3]} —à—Ç.\n"
            products_text += f"üëÜ /edit_product_{product[0]} - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            products_text += f"üëÜ /delete_product_{product[0]} - —É–¥–∞–ª–∏—Ç—å\n\n"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, products_text, keyboard)
    
    def show_users_stats(self, chat_id):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        stats = self.db.execute_query('''
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN created_at >= date('now', '-7 days') THEN 1 END) as new_users_week,
                COUNT(CASE WHEN language = 'uz' THEN 1 END) as uzbek_users
            FROM users
            WHERE is_admin = 0
        ''')[0]
        
        users_text = f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        users_text += f"üìä –í—Å–µ–≥–æ: {stats[0]}\n"
        users_text += f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats[1]}\n"
        users_text += f"üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫: {stats[2]}\n"
        users_text += f"üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: {stats[0] - stats[2]}"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, users_text, keyboard)
    
    def show_analytics_menu(self, chat_id):
        """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_text = "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üìä –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥', 'callback_data': 'analytics_sales'},
                    {'text': 'üë• –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'callback_data': 'analytics_behavior'}
                ],
                [
                    {'text': 'üìà ABC-–∞–Ω–∞–ª–∏–∑', 'callback_data': 'analytics_abc'},
                    {'text': 'üéØ –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏', 'callback_data': 'analytics_funnel'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back_main'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, analytics_text, keyboard)
    
    def show_security_stats(self, chat_id):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_text = "üõ° <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>\n\n–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞.\n\n"
        security_text += "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, security_text, keyboard)
    
    def show_financial_stats(self, chat_id):
        """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            today_revenue = self.db.execute_query('''
                SELECT COALESCE(SUM(total_amount), 0) 
                FROM orders 
                WHERE DATE(created_at) = DATE('now') AND status != 'cancelled'
            ''')[0][0]
            
            month_revenue = self.db.execute_query('''
                SELECT COALESCE(SUM(total_amount), 0) 
                FROM orders 
                WHERE DATE(created_at) >= DATE('now', 'start of month') AND status != 'cancelled'
            ''')[0][0]
            
            financial_text = f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:</b>\n\n"
            financial_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {format_price(today_revenue)}\n"
            financial_text += f"üìä –ó–∞ –º–µ—Å—è—Ü: {format_price(month_revenue)}\n\n"
            financial_text += f"üí° –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
            
        except Exception as e:
            financial_text = "üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b>\n\n–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            print(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, financial_text, keyboard)
    
    def show_inventory_stats(self, chat_id):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            low_stock = self.db.execute_query(
                'SELECT COUNT(*) FROM products WHERE stock <= 5 AND is_active = 1'
            )[0][0]
            
            out_of_stock = self.db.execute_query(
                'SELECT COUNT(*) FROM products WHERE stock = 0 AND is_active = 1'
            )[0][0]
            
            inventory_text = f"üì¶ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞:</b>\n\n"
            
            if out_of_stock > 0:
                inventory_text += f"üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {out_of_stock} —Ç–æ–≤–∞—Ä–æ–≤\n"
            if low_stock > 0:
                inventory_text += f"üü° –ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {low_stock} —Ç–æ–≤–∞—Ä–æ–≤\n"
            
            if out_of_stock == 0 and low_stock == 0:
                inventory_text += f"‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏!"
            else:
                inventory_text += f"\nüí° –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞"
                
        except Exception as e:
            inventory_text = "üì¶ <b>–°–∫–ª–∞–¥</b>\n\n–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            print(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞: {e}")
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, inventory_text, keyboard)
    
    def show_ai_features(self, chat_id):
        """AI —Ñ—É–Ω–∫—Ü–∏–∏"""
        ai_text = "ü§ñ <b>AI —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n"
        ai_text += "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        ai_text += "‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        ai_text += "‚úÖ –£–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        ai_text += "‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞\n\n"
        ai_text += "üí° AI —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, ai_text, keyboard)
    
    def show_automation_stats(self, chat_id):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        automation_text = "üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b>\n\n"
        automation_text += "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        automation_text += "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω\n"
        automation_text += "‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
        automation_text += "‚úÖ –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞\n\n"
        automation_text += "üí° –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, automation_text, keyboard)
    
    def show_crm_stats(self, chat_id):
        """CRM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            from crm import CRMManager
            crm = CRMManager(self.db)
            segments = crm.segment_customers()
            
            crm_text = f"üë• <b>CRM –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è:</b>\n\n"
            crm_text += f"üèÜ –ß–µ–º–ø–∏–æ–Ω—ã: {len(segments.get('champions', []))}\n"
            crm_text += f"üíé –õ–æ—è–ª—å–Ω—ã–µ: {len(segments.get('loyal', []))}\n"
            crm_text += f"‚≠ê –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ: {len(segments.get('potential', []))}\n"
            crm_text += f"üÜï –ù–æ–≤—ã–µ: {len(segments.get('new', []))}\n"
            crm_text += f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {len(segments.get('need_attention', []))}\n"
            crm_text += f"üö® –í –∑–æ–Ω–µ —Ä–∏—Å–∫–∞: {len(segments.get('at_risk', []))}\n\n"
            crm_text += f"üí° –ü–æ–¥—Ä–æ–±–Ω–∞—è CRM –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
            
        except ImportError:
            crm_text = "üë• <b>CRM</b>\n\n–ú–æ–¥—É–ª—å CRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            crm_text = "üë• <b>CRM</b>\n\n–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            print(f"–û—à–∏–±–∫–∞ CRM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, crm_text, keyboard)
    
    def show_broadcast_menu(self, chat_id):
        """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        broadcast_text = "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        broadcast_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'callback_data': 'broadcast_all'},
                    {'text': 'üî• –ê–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º', 'callback_data': 'broadcast_active'}
                ],
                [
                    {'text': 'üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–º', 'callback_data': 'broadcast_inactive'},
                    {'text': 'üÜï –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'callback_data': 'broadcast_new'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back_main'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, broadcast_text, keyboard)
    
    def exit_admin_mode(self, chat_id, telegram_id):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if telegram_id in self.admin_states:
            del self.admin_states[telegram_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if user_data:
            language = user_data[0][5]
            welcome_text = "üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º"
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def handle_order_management(self, message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        if text.startswith('/admin_order_'):
            order_id = int(text.split('_')[2])
            self.show_order_details(chat_id, order_id)
    
    def show_order_details(self, chat_id, order_id):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
        order_details = self.db.get_order_details(order_id)
        
        if not order_details:
            self.bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        order = order_details['order']
        items = order_details['items']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        user = self.db.execute_query(
            'SELECT name, phone, email FROM users WHERE id = ?',
            (order[1],)
        )[0]
        
        details_text = f"üìã <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
        details_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {user[0]}\n"
        if user[1]:
            details_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[1]}\n"
        if user[2]:
            details_text += f"üìß Email: {user[2]}\n"
        
        details_text += f"\nüí∞ –°—É–º–º–∞: {format_price(order[2])}\n"
        details_text += f"üìÖ –î–∞—Ç–∞: {format_date(order[7])}\n"
        details_text += f"üìä –°—Ç–∞—Ç—É—Å: {get_order_status_text(order[3])}\n"
        
        if order[4]:
            details_text += f"üìç –ê–¥—Ä–µ—Å: {order[4]}\n"
        
        details_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {order[5]}\n"
        
        details_text += f"\nüõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for item in items:
            details_text += f"‚Ä¢ {item[2]} √ó {item[0]} = {format_price(item[1] * item[0])}\n"
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'callback_data': f'change_status_{order_id}_confirmed'},
                    {'text': 'üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'callback_data': f'change_status_{order_id}_shipped'}
                ],
                [
                    {'text': 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', 'callback_data': f'change_status_{order_id}_delivered'},
                    {'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'callback_data': f'change_status_{order_id}_cancelled'}
                ],
                [
                    {'text': 'üîô –ö –∑–∞–∫–∞–∑–∞–º', 'callback_data': 'admin_orders'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, details_text, keyboard)
    
    def handle_product_commands(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
        text = message.get('text', '')
        chat_id = message['chat']['id']
        
        if text.startswith('/edit_product_'):
            product_id = int(text.split('_')[2])
            self.show_product_edit_menu(chat_id, product_id)
        elif text.startswith('/delete_product_'):
            product_id = int(text.split('_')[2])
            self.confirm_product_deletion(chat_id, product_id)
    
    def show_product_edit_menu(self, chat_id, product_id):
        """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        product = self.db.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        edit_text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        edit_text += f"üõç <b>{product[1]}</b>\n"
        edit_text += f"üí∞ –¶–µ–Ω–∞: {format_price(product[3])}\n"
        edit_text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {product[7]} —à—Ç.\n"
        edit_text += f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if product[8] else '–°–∫—Ä—ã—Ç'}\n\n"
        edit_text += f"üí° –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, edit_text, keyboard)
    
    def confirm_product_deletion(self, chat_id, product_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        product = self.db.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        confirm_text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        confirm_text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n"
        confirm_text += f"üõç <b>{product[1]}</b>\n\n"
        confirm_text += f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'callback_data': f'delete_product_confirm_{product_id}'},
                    {'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'admin_products'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, confirm_text, keyboard)
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callback'–æ–≤"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            if data.startswith('change_status_'):
                parts = data.split('_')
                order_id = int(parts[2])
                new_status = parts[3]
                self.change_order_status(chat_id, order_id, new_status)
            elif data.startswith('delete_product_confirm_'):
                product_id = int(data.split('_')[3])
                self.delete_product(chat_id, product_id)
            elif data == 'admin_back_main':
                self.show_admin_panel(chat_id)
            elif data == 'admin_orders':
                self.show_orders_management(chat_id)
            elif data == 'admin_products':
                self.show_products_management(chat_id)
            elif data.startswith('broadcast_'):
                self.handle_broadcast_callback(callback_query)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω callback: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    def change_order_status(self, chat_id, order_id, new_status):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        result = self.db.update_order_status(order_id, new_status)
        
        if result is not None:
            status_text = get_order_status_text(new_status)
            self.bot.send_message(chat_id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if self.notification_manager:
                self.notification_manager.send_order_status_notification(order_id, new_status)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    def delete_product(self, chat_id, product_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        product = self.db.get_product_by_id(product_id)
        product_name = product[1] if product else f"ID {product_id}"
        
        result = self.db.execute_query('DELETE FROM products WHERE id = ?', (product_id,))
        
        if result is not None:
            self.bot.send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä \"{product_name}\" —É–¥–∞–ª–µ–Ω")
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    
    def handle_broadcast_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        telegram_id = callback_query['from']['id']
        
        if data == 'broadcast_all':
            self.start_broadcast_creation(chat_id, telegram_id, 'all')
        elif data == 'broadcast_active':
            self.start_broadcast_creation(chat_id, telegram_id, 'active')
        elif data == 'broadcast_inactive':
            self.start_broadcast_creation(chat_id, telegram_id, 'inactive')
        elif data == 'broadcast_new':
            self.start_broadcast_creation(chat_id, telegram_id, 'new')
    
    def start_broadcast_creation(self, chat_id, telegram_id, target_type):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.admin_states[telegram_id] = f'creating_broadcast_{target_type}'
        
        target_names = {
            'all': '–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            'active': '–∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º',
            'inactive': '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º',
            'new': '–Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        }
        
        broadcast_text = f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ {target_names.get(target_type, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')}</b>\n\n"
        broadcast_text += f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, broadcast_text, keyboard)
    
    def handle_broadcast_creation(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        if text in ['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞']:
            del self.admin_states[telegram_id]
            self.show_admin_panel(chat_id)
            return
        
        state = self.admin_states.get(telegram_id, '')
        if state.startswith('creating_broadcast_'):
            target_type = state.split('_')[2]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            if self.notification_manager:
                success_count, error_count = self.notification_manager.send_promotional_broadcast(
                    text, target_type
                )
                
                result_text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                result_text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                result_text += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n\n"
                result_text += f"üìù –¢–µ–∫—Å—Ç: {text[:50]}{'...' if len(text) > 50 else ''}"
                
                self.bot.send_message(chat_id, result_text)
            else:
                self.bot.send_message(chat_id, "‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del self.admin_states[telegram_id]
            self.show_admin_panel(chat_id)
    
    def handle_add_product_process(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–ø–∞–Ω–µ–ª—å
        add_product_text = "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        add_product_text += "üí° –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        add_product_text += "üåê http://localhost:5000\n"
        add_product_text += "üë§ –õ–æ–≥–∏–Ω: AdminUser\n"
        add_product_text += "üîë –ü–∞—Ä–æ–ª—å: admin123\n\n"
        add_product_text += "–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        add_product_text += "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        add_product_text += "‚Ä¢ –ó–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        add_product_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n"
        add_product_text += "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, add_product_text, keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if telegram_id in self.admin_states:
            del self.admin_states[telegram_id]
    
    def handle_analytics_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        
        if data == 'analytics_sales':
            self.show_sales_analytics(chat_id)
        elif data == 'analytics_behavior':
            self.show_behavior_analytics(chat_id)
        elif data == 'analytics_abc':
            self.show_abc_analytics(chat_id)
        elif data == 'analytics_funnel':
            self.show_funnel_analytics(chat_id)
    
    def show_sales_analytics(self, chat_id):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂"""
        try:
            from analytics import AnalyticsManager
            analytics = AnalyticsManager(self.db)
            
            from datetime import datetime, timedelta
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            
            report = analytics.get_sales_report(start_date, end_date)
            formatted_report = analytics.format_sales_report(report)
            
            self.bot.send_message(chat_id, formatted_report)
            
        except ImportError:
            self.bot.send_message(chat_id, "üìä –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    def show_behavior_analytics(self, chat_id):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        behavior_text = "üë• <b>–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        behavior_text += "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, behavior_text, keyboard)
    
    def show_abc_analytics(self, chat_id):
        """ABC –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        abc_text = "üìà <b>ABC –∞–Ω–∞–ª–∏–∑</b>\n\n"
        abc_text += "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π ABC –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, abc_text, keyboard)
    
    def show_funnel_analytics(self, chat_id):
        """–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        funnel_text = "üéØ <b>–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</b>\n\n"
        funnel_text += "üìä –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, funnel_text, keyboard)
    
    def handle_export_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        
        export_text = "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        export_text += "üí° –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, export_text, keyboard)
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

from keyboards import *
from utils import *
from localization import t, get_user_language

class MessageHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.user_states = {}
        self.notification_manager = None
        self.payment_processor = None
    
    def handle_message(self, message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if not user_data:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                self.start_registration(message)
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ü–ï–†–í–´–ú–ò
            if text in ['üè† –ì–ª–∞–≤–Ω–∞—è', 'üè† Bosh sahifa']:
                self.send_main_menu(chat_id, language, user_data[0])
                return
            elif text in ['üîô –ù–∞–∑–∞–¥', 'üîô Orqaga']:
                self.handle_back_button(chat_id, telegram_id, language)
                return
            elif text in ['üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'üîô Kategoriyalarga']:
                self.show_catalog(chat_id, language)
                return
            elif text in ['üîô –ì–ª–∞–≤–Ω–∞—è', 'üîô Bosh sahifa']:
                self.send_main_menu(chat_id, language, user_data[0])
                return
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if text == '/start':
                self.send_welcome_message(chat_id, language, user_data[0])
            elif text == '/help':
                self.send_help_message(chat_id, language)
            elif text in ['üõç –ö–∞—Ç–∞–ª–æ–≥', 'üõç Katalog']:
                self.show_catalog(chat_id, language)
            elif text in ['üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üõí Savat']:
                self.show_cart(chat_id, user_id, language)
            elif text in ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìã Mening buyurtmalarim']:
                self.show_user_orders(chat_id, user_id, language)
            elif text in ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë§ Profil']:
                self.show_user_profile(chat_id, user_id, language)
            elif text in ['üîç –ü–æ–∏—Å–∫', 'üîç Qidiruv']:
                self.start_search(chat_id, language)
            elif text in ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', '‚ÑπÔ∏è Yordam']:
                self.send_help_message(chat_id, language)
            elif text in ['‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', '‚≠ê Sadoqat dasturi']:
                self.show_loyalty_program(chat_id, user_id, language)
            elif text in ['üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã', 'üéÅ Promokodlar']:
                self.show_promo_codes(chat_id, user_id, language)
            elif text.startswith('üì± ') or text.startswith('üëï ') or text.startswith('üè† ') or text.startswith('‚öΩ ') or text.startswith('üíÑ ') or text.startswith('üìö '):
                self.handle_category_selection(message, user_id, language)
            elif text.startswith('üõç '):
                self.handle_product_selection(message, user_id, language)
            elif text.startswith('üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑') or text.startswith('üì¶ Buyurtma berish'):
                self.start_order_process(chat_id, user_id, language)
            elif text.startswith('üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É') or text.startswith('üóë Savatni tozalash'):
                self.clear_user_cart(chat_id, user_id, language)
            elif text.startswith('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã') or text.startswith('‚ûï Mahsulot qo\'shish'):
                self.show_catalog(chat_id, language)
            elif text.startswith('üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥') or text.startswith('üõç Katalogga o\'tish'):
                self.show_catalog(chat_id, language)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                state = self.user_states.get(telegram_id, '')
                if state.startswith('registration_'):
                    self.handle_registration_step(message)
                elif state == 'searching':
                    self.handle_search_query(message, user_id, language)
                elif state == 'ordering':
                    self.handle_order_process(message, user_id, language)
                elif state.startswith('viewing_category_'):
                    self.handle_subcategory_selection(message, user_id, language)
                elif state.startswith('viewing_subcategory_'):
                    self.handle_product_from_subcategory(message, user_id, language)
                else:
                    self.send_unknown_command(chat_id, language)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def send_main_menu(self, chat_id, language, user_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = user_data[1]
        if telegram_id in self.user_states:
            del self.user_states[telegram_id]
        
        welcome_text = t('welcome_back', language=language)
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def handle_back_button(self, chat_id, telegram_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
        current_state = self.user_states.get(telegram_id, '')
        
        if current_state.startswith('viewing_category_'):
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É
            self.show_catalog(chat_id, language)
        elif current_state.startswith('viewing_subcategory_'):
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_id = current_state.split('_')[2]
            self.show_category_products(chat_id, int(category_id), language, telegram_id)
        elif current_state.startswith('viewing_product_'):
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.show_catalog(chat_id, language)
        elif current_state == 'searching':
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–∏—Å–∫–∞
            del self.user_states[telegram_id]
            self.send_main_menu(chat_id, language, self.get_user_data(telegram_id))
        elif current_state == 'ordering':
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            del self.user_states[telegram_id]
            user_data = self.get_user_data(telegram_id)
            user_id = user_data[0]
            self.show_cart(chat_id, user_id, language)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user_data = self.get_user_data(telegram_id)
            self.send_main_menu(chat_id, language, user_data)
    
    def get_user_data(self, telegram_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        return user_data[0] if user_data else None
    
    def start_registration(self, message):
        """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è –∏–∑ Telegram
        suggested_name = message['from'].get('first_name', '')
        if message['from'].get('last_name'):
            suggested_name += f" {message['from']['last_name']}"
        
        self.user_states[telegram_id] = 'registration_name'
        
        welcome_text = "üõç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
        welcome_text += "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        welcome_text += "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        
        keyboard = create_registration_keyboard('name', suggested_name)
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def handle_registration_step(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        state = self.user_states.get(telegram_id, '')
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_states[telegram_id]
            self.bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        
        if state == 'registration_name':
            if not hasattr(self, 'registration_data'):
                self.registration_data = {}
            
            self.user_states[telegram_id] = 'registration_phone'
            self.registration_data[telegram_id] = {'name': text}
            
            phone_text = "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥"
            keyboard = create_registration_keyboard('phone')
            self.bot.send_message(chat_id, phone_text, keyboard)
            
        elif state == 'registration_phone':
            phone = None
            if 'contact' in message:
                phone = message['contact']['phone_number']
            elif text != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                phone = text
            
            if not hasattr(self, 'registration_data'):
                self.registration_data = {}
            if telegram_id not in self.registration_data:
                self.registration_data[telegram_id] = {'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
            
            self.registration_data[telegram_id]['phone'] = phone
            self.user_states[telegram_id] = 'registration_language'
            
            lang_text = "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang"
            keyboard = create_registration_keyboard('language')
            self.bot.send_message(chat_id, lang_text, keyboard)
            
        elif state == 'registration_language':
            language = 'ru'
            if text == 'üá∫üáø O\'zbekcha':
                language = 'uz'
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reg_data = self.registration_data.get(telegram_id, {'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'})
            user_id = self.db.add_user(
                telegram_id,
                reg_data['name'],
                reg_data.get('phone'),
                None,
                language
            )
            
            if user_id:
                del self.user_states[telegram_id]
                if hasattr(self, 'registration_data') and telegram_id in self.registration_data:
                    del self.registration_data[telegram_id]
                
                success_text = t('registration_complete', language=language)
                keyboard = create_main_keyboard()
                self.bot.send_message(chat_id, success_text, keyboard)
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def send_welcome_message(self, chat_id, language, user_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        welcome_text = t('welcome_back', language=language)
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def send_help_message(self, chat_id, language):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = t('help', language=language)
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, help_text, keyboard)
    
    def show_catalog(self, chat_id, language):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            categories = self.db.get_categories()
            print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories) if categories else 0}")
            
            if categories:
                catalog_text = "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
                keyboard = create_categories_keyboard(categories)
                self.bot.send_message(chat_id, catalog_text, keyboard)
            else:
                error_text = "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                keyboard = create_main_keyboard()
                self.bot.send_message(chat_id, error_text, keyboard)
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, error_text, keyboard)
    
    def handle_category_selection(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if ' ' in text:
            category_name = text.split(' ', 1)[1].strip()
        else:
            category_name = text.strip()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        categories = self.db.get_categories()
        selected_category = None
        
        for category in categories:
            if category[1].strip() == category_name:
                selected_category = category
                break
        
        if selected_category:
            category_id = selected_category[0]
            self.user_states[telegram_id] = f'viewing_category_{category_id}'
            self.show_category_products(chat_id, category_id, language, telegram_id)
        else:
            print(f"DEBUG: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–∫–∞–ª–∏: '{category_name}', –î–æ—Å—Ç—É–ø–Ω—ã–µ: {[cat[1] for cat in categories]}")
            self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ
            self.show_catalog(chat_id, language)
    
    def show_category_products(self, chat_id, category_id, language, telegram_id):
        """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            subcategories = self.db.get_products_by_category(category_id)
            print(f"DEBUG: –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {subcategories}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            subcategories = []
        
        if subcategories:
            try:
                category_result = self.db.execute_query(
                    'SELECT name FROM categories WHERE id = ?', (category_id,)
                )
                category_name = category_result[0][0] if category_result else "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
                category_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            
            subcategory_text = f"üìÇ <b>{category_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            keyboard = create_subcategories_keyboard(subcategories)
            self.bot.send_message(chat_id, subcategory_text, keyboard)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
            try:
                products = self.db.execute_query('''
                    SELECT * FROM products 
                    WHERE category_id = ? AND is_active = 1 
                    ORDER BY name LIMIT 10
                ''', (category_id,))
                print(f"DEBUG: –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {len(products) if products else 0}")
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                products = []
            
            if products:
                self.show_products_list(chat_id, products, language)
            else:
                no_products_text = "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤\n\nüîô –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                keyboard = create_back_keyboard()
                self.bot.send_message(chat_id, no_products_text, keyboard)
    
    def handle_subcategory_selection(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if ' ' in text:
            subcategory_name = text.split(' ', 1)[1].strip()
        else:
            subcategory_name = text.strip()
        
        print(f"DEBUG: –ò—â–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{subcategory_name}'")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        try:
            subcategory = self.db.execute_query(
                'SELECT id FROM subcategories WHERE name = ?', (subcategory_name,)
            )
            print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {subcategory}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            subcategory = None
        
        if subcategory:
            subcategory_id = subcategory[0][0]
            self.user_states[telegram_id] = f'viewing_subcategory_{subcategory_id}'
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                products = self.db.get_products_by_subcategory(subcategory_id)
                print(f"DEBUG: –¢–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory_id}: {len(products) if products else 0}")
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
                products = []
            
            if products:
                self.show_products_list(chat_id, products, language)
            else:
                no_products_text = "‚ùå –í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤\n\nüîô –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                keyboard = create_back_keyboard()
                self.bot.send_message(chat_id, no_products_text, keyboard)
        else:
            print(f"DEBUG: –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self.bot.send_message(chat_id, "‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∫–∞—Ç–∞–ª–æ–≥—É
            self.show_catalog(chat_id, language)
    
    def show_products_list(self, chat_id, products, language):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        if not products:
            no_products_text = "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\nüîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, no_products_text, keyboard)
            return
        
        try:
            products_text = f"üõç <b>–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}</b>\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
            products_keyboard = []
            for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Ç–æ–≤–∞—Ä–æ–≤
                try:
                    name = product[1] if len(product) > 1 else '–¢–æ–≤–∞—Ä'
                    price = product[3] if len(product) > 3 else 0
                    products_keyboard.append([f"üõç {name} - ${price:.2f}"])
                except Exception as e:
                    print(f"DEBUG: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                    continue
            
            products_keyboard.append(['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–∞—è'])
            
            keyboard = {
                'keyboard': products_keyboard,
                'resize_keyboard': True,
                'one_time_keyboard': False
            }
            
            self.bot.send_message(chat_id, products_text, keyboard)
            
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, error_text, keyboard)
    
    def show_product_card(self, chat_id, product, language):
        """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        product_id = product[0]
        name = product[1]
        description = product[2] or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        price = product[3]
        image_url = product[6] if len(product) > 6 else None
        stock = product[7] if len(product) > 7 else 0
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        self.db.increment_product_views(product_id)
        
        card_text = f"<b>{name}</b>\n\n"
        card_text += f"{description[:200]}{'...' if len(description) > 200 else ''}\n\n"
        card_text += f"üí∞ –¶–µ–Ω–∞: <b>{format_price(price)}</b>\n"
        card_text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç."
        
        keyboard = create_product_inline_keyboard(product_id)
        
        if image_url:
            self.bot.send_photo(chat_id, image_url, card_text, keyboard)
        else:
            self.bot.send_message(chat_id, card_text, keyboard)
    
    def handle_product_selection(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if text.startswith('üõç '):
            product_info = text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            product_name = product_info.split(' - ')[0].strip()
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            product = self.db.execute_query(
                'SELECT * FROM products WHERE name = ? AND is_active = 1',
                (product_name,)
            )
            
            if product:
                self.show_product_card(chat_id, product[0], language)
            else:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def show_cart(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            empty_text = t('empty_cart', language=language)
            keyboard = create_cart_keyboard(False)
            self.bot.send_message(chat_id, empty_text, keyboard)
            return
        
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        total = 0
        
        for item in cart_items:
            item_total = item[2] * item[3]
            total += item_total
            cart_text += f"‚Ä¢ {item[1]} √ó {item[3]} = {format_price(item_total)}\n"
        
        cart_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {format_price(total)}</b>"
        
        keyboard = create_cart_keyboard(True)
        self.bot.send_message(chat_id, cart_text, keyboard)
    
    def clear_user_cart(self, chat_id, user_id, language):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = self.db.clear_cart(user_id)
        if result is not None:
            self.bot.send_message(chat_id, "‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
            self.show_cart(chat_id, user_id, language)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã")
    
    def start_order_process(self, chat_id, user_id, language):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            self.bot.send_message(chat_id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
        
        total = calculate_cart_total(cart_items)
        
        order_text = f"üì¶ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        order_text += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {format_price(total)}\n\n"
        order_text += f"üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        telegram_id = message['from']['id']
        self.user_states[telegram_id] = 'ordering_address'
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, order_text, keyboard)
    
    def handle_order_process(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        state = self.user_states.get(telegram_id, '')
        
        if state == 'ordering_address':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã
            if not hasattr(self, 'order_data'):
                self.order_data = {}
            self.order_data[telegram_id] = {'address': text}
            self.user_states[telegram_id] = 'ordering_payment'
            
            payment_text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
            keyboard = create_payment_methods_keyboard(language)
            self.bot.send_message(chat_id, payment_text, keyboard)
            
        elif state == 'ordering_payment':
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_data = self.order_data.get(telegram_id, {})
            cart_items = self.db.get_cart_items(user_id)
            total = calculate_cart_total(cart_items)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_id = self.db.create_order(
                user_id, total, order_data.get('address', ''), text
            )
            
            if order_id:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
                self.db.add_order_items(order_id, cart_items)
                
                # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                self.db.clear_cart(user_id)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.user_states[telegram_id]
                if hasattr(self, 'order_data') and telegram_id in self.order_data:
                    del self.order_data[telegram_id]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
                success_text = f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                success_text += f"üí∞ –°—É–º–º–∞: {format_price(total)}\n"
                success_text += f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                success_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
                
                keyboard = create_main_keyboard()
                self.bot.send_message(chat_id, success_text, keyboard)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                if self.notification_manager:
                    self.notification_manager.send_order_notification_to_admins(order_id)
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    
    def show_user_orders(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        orders = self.db.get_user_orders(user_id)
        
        if not orders:
            no_orders_text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n\nüõç –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!"
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, no_orders_text, keyboard)
            return
        
        orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = get_order_status_emoji(order[3])
            status_text = get_order_status_text(order[3])
            orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order[0]} - {format_price(order[2])}\n"
            orders_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            orders_text += f"üìÖ {format_date(order[7])}\n\n"
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, orders_text, keyboard)
    
    def show_user_profile(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.db.execute_query('SELECT * FROM users WHERE id = ?', (user_id,))[0]
        
        profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        profile_text += f"üìù –ò–º—è: {user[2]}\n"
        if user[3]:
            profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[3]}\n"
        if user[4]:
            profile_text += f"üìß Email: {user[4]}\n"
        profile_text += f"üåç –Ø–∑—ã–∫: {'–†—É—Å—Å–∫–∏–π' if user[5] == 'ru' else 'O\'zbekcha'}\n"
        profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_date(user[7])}"
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, profile_text, keyboard)
    
    def start_search(self, chat_id, language):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
        search_text = "üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, search_text, keyboard)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        telegram_id = chat_id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ chat_id = telegram_id –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        self.user_states[telegram_id] = 'searching'
    
    def handle_search_query(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        query = message.get('text', '')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if telegram_id in self.user_states:
            del self.user_states[telegram_id]
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
        products = self.db.search_products(query, 5)
        
        if products:
            search_result_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> \"{query}\"\n\n"
            search_result_text += f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä(–æ–≤):"
            
            self.bot.send_message(chat_id, search_result_text)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            for product in products:
                self.show_product_card(chat_id, product, language)
        else:
            not_found_text = f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            not_found_text += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            not_found_text += "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            not_found_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            not_found_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥"
            
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, not_found_text, keyboard)
    
    def show_loyalty_program(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        loyalty_data = self.db.get_user_loyalty_points(user_id)
        
        loyalty_text = f"‚≠ê <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        loyalty_text += f"üíé –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>{loyalty_data[4]}</b>\n"
        loyalty_text += f"üèÜ –ë–∞–ª–ª–æ–≤: <b>{loyalty_data[2]}</b>\n"
        loyalty_text += f"üìä –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {loyalty_data[3]}\n\n"
        loyalty_text += f"üéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–ª–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫!"
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, loyalty_text, keyboard)
    
    def show_promo_codes(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
        try:
            from promotions import PromotionManager
            promo_manager = PromotionManager(self.db)
            available_promos = promo_manager.get_user_available_promos(user_id)
            
            if available_promos:
                promo_text = f"üéÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
                
                for promo in available_promos[:5]:
                    promo_text += f"üè∑ <code>{promo[1]}</code>\n"
                    promo_text += f"üí∞ –°–∫–∏–¥–∫–∞: {promo[3]}{'%' if promo[2] == 'percentage' else '$'}\n"
                    if promo[4] > 0:
                        promo_text += f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {format_price(promo[4])}\n"
                    promo_text += f"üìù {promo[7]}\n\n"
            else:
                promo_text = "üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.\n\nüí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!"
        except ImportError:
            promo_text = "üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, promo_text, keyboard)
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            message_id = callback_query['message']['message_id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            
            if data.startswith('add_to_cart_'):
                product_id = int(data.split('_')[3])
                self.add_product_to_cart(chat_id, user_id, product_id, language)
            elif data.startswith('add_to_favorites_'):
                product_id = int(data.split('_')[3])
                self.add_to_favorites(chat_id, user_id, product_id, language)
            elif data.startswith('reviews_'):
                product_id = int(data.split('_')[1])
                self.show_product_reviews(chat_id, product_id, language)
            elif data.startswith('rate_product_'):
                product_id = int(data.split('_')[2])
                self.show_rating_keyboard(chat_id, product_id, message_id)
            elif data.startswith('rate_'):
                parts = data.split('_')
                product_id = int(parts[1])
                rating = int(parts[2])
                self.save_product_rating(chat_id, user_id, product_id, rating, language)
            elif data.startswith('cart_increase_'):
                cart_item_id = int(data.split('_')[2])
                self.update_cart_item_quantity(chat_id, user_id, cart_item_id, 1, language)
            elif data.startswith('cart_decrease_'):
                cart_item_id = int(data.split('_')[2])
                self.update_cart_item_quantity(chat_id, user_id, cart_item_id, -1, language)
            elif data.startswith('cart_remove_'):
                cart_item_id = int(data.split('_')[2])
                self.remove_cart_item(chat_id, user_id, cart_item_id, language)
            elif data == 'cancel_rating':
                self.bot.send_message(chat_id, "‚ùå –û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def add_product_to_cart(self, chat_id, user_id, product_id, language):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        result = self.db.add_to_cart(user_id, product_id, 1)
        
        if result:
            self.bot.send_message(chat_id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
    
    def add_to_favorites(self, chat_id, user_id, product_id, language):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        result = self.db.add_to_favorites(user_id, product_id)
        
        if result:
            self.bot.send_message(chat_id, "‚ù§Ô∏è –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    
    def show_product_reviews(self, chat_id, product_id, language):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–µ"""
        reviews = self.db.get_product_reviews(product_id)
        
        if reviews:
            reviews_text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ:</b>\n\n"
            
            for review in reviews[:5]:
                stars = '‚≠ê' * review[0]
                reviews_text += f"{stars} <b>–û—Ü–µ–Ω–∫–∞: {review[0]}/5</b>\n"
                if review[1]:
                    reviews_text += f"üí≠ \"{review[1]}\"\n"
                reviews_text += f"üë§ {review[3]} ‚Ä¢ {format_date(review[2])}\n\n"
        else:
            reviews_text = "‚≠ê <b>–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ.\n\nüí° –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!"
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, reviews_text, keyboard)
    
    def show_rating_keyboard(self, chat_id, product_id, message_id):
        """–ü–æ–∫–∞–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        rating_text = "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ —Ç–æ–≤–∞—Ä –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:"
        keyboard = create_rating_keyboard(product_id)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        self.bot.edit_message_reply_markup(chat_id, message_id, keyboard)
        self.bot.send_message(chat_id, rating_text)
    
    def save_product_rating(self, chat_id, user_id, product_id, rating, language):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        result = self.db.add_review(user_id, product_id, rating, "")
        
        if result:
            self.bot.send_message(chat_id, f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤–µ–∑–¥.")
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")
    
    def update_cart_item_quantity(self, chat_id, user_id, cart_item_id, change, language):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_item = self.db.execute_query(
            'SELECT quantity FROM cart WHERE id = ?', (cart_item_id,)
        )
        
        if cart_item:
            new_quantity = cart_item[0][0] + change
            result = self.db.update_cart_quantity(cart_item_id, new_quantity)
            
            if result is not None:
                if new_quantity > 0:
                    self.bot.send_message(chat_id, f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_quantity} —à—Ç.")
                else:
                    self.bot.send_message(chat_id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
                self.show_cart(chat_id, user_id, language)
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã")
    
    def remove_cart_item(self, chat_id, user_id, cart_item_id, language):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        result = self.db.remove_from_cart(cart_item_id)
        
        if result is not None:
            self.bot.send_message(chat_id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
            self.show_cart(chat_id, user_id, language)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    
    def send_unknown_command(self, chat_id, language):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        unknown_text = "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, unknown_text, keyboard)
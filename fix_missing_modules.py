#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

import os

def create_handlers_module():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è handlers.py"""
    handlers_content = '''"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

from keyboards import *
from utils import *
from localization import t, get_user_language

class MessageHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.user_states = {}
        self.notification_manager = None
        self.payment_processor = None
    
    def handle_message(self, message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if not user_data:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                self.start_registration(message)
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text == '/start':
                self.send_welcome_message(chat_id, language, user_data[0])
            elif text == '/help':
                self.send_help_message(chat_id, language)
            elif text == 'üõç –ö–∞—Ç–∞–ª–æ–≥' or text == 'üõç Katalog':
                self.show_catalog(chat_id, language)
            elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞' or text == 'üõí Savat':
                self.show_cart(chat_id, user_id, language)
            elif text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                self.show_user_orders(chat_id, user_id, language)
            elif text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                self.show_user_profile(chat_id, user_id, language)
            elif text == 'üîç –ü–æ–∏—Å–∫':
                self.start_search(chat_id, language)
            elif text.startswith('üõç '):
                self.handle_product_selection(message, user_id)
            elif text.startswith('üì± ') or text.startswith('üëï ') or text.startswith('üè† '):
                self.handle_category_selection(message, user_id)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                state = self.user_states.get(telegram_id, '')
                if state.startswith('registration_'):
                    self.handle_registration_step(message)
                elif state == 'searching':
                    self.handle_search_query(message, user_id)
                elif state == 'ordering':
                    self.handle_order_process(message, user_id)
                else:
                    self.send_unknown_command(chat_id, language)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def start_registration(self, message):
        """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è –∏–∑ Telegram
        suggested_name = message['from'].get('first_name', '')
        if message['from'].get('last_name'):
            suggested_name += f" {message['from']['last_name']}"
        
        self.user_states[telegram_id] = 'registration_name'
        
        welcome_text = "üõç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!</b>\\n\\n"
        welcome_text += "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\\n\\n"
        welcome_text += "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        
        keyboard = create_registration_keyboard('name', suggested_name)
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def handle_registration_step(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        state = self.user_states.get(telegram_id, '')
        
        if state == 'registration_name':
            if text == '‚ùå –û—Ç–º–µ–Ω–∞':
                del self.user_states[telegram_id]
                self.bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            self.user_states[telegram_id] = 'registration_phone'
            self.registration_data = {'name': text}
            
            phone_text = "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥"
            keyboard = create_registration_keyboard('phone')
            self.bot.send_message(chat_id, phone_text, keyboard)
            
        elif state == 'registration_phone':
            phone = None
            if 'contact' in message:
                phone = message['contact']['phone_number']
            elif text != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' and text != '‚ùå –û—Ç–º–µ–Ω–∞':
                phone = text
            
            if text == '‚ùå –û—Ç–º–µ–Ω–∞':
                del self.user_states[telegram_id]
                self.bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            
            self.registration_data['phone'] = phone
            self.user_states[telegram_id] = 'registration_language'
            
            lang_text = "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang"
            keyboard = create_registration_keyboard('language')
            self.bot.send_message(chat_id, lang_text, keyboard)
            
        elif state == 'registration_language':
            language = 'ru'
            if text == 'üá∫üáø O\'zbekcha':
                language = 'uz'
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = self.db.add_user(
                telegram_id,
                self.registration_data['name'],
                self.registration_data.get('phone'),
                None,
                language
            )
            
            if user_id:
                del self.user_states[telegram_id]
                
                success_text = t('registration_complete', language=language)
                keyboard = create_main_keyboard()
                self.bot.send_message(chat_id, success_text, keyboard)
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def send_welcome_message(self, chat_id, language, user_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        welcome_text = t('welcome_back', language=language)
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def send_help_message(self, chat_id, language):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = t('help', language=language)
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, help_text, keyboard)
    
    def show_catalog(self, chat_id, language):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        categories = self.db.get_categories()
        if categories:
            catalog_text = "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            keyboard = create_categories_keyboard(categories)
            self.bot.send_message(chat_id, catalog_text, keyboard)
        else:
            self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def show_cart(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            empty_text = t('empty_cart', language=language)
            keyboard = create_cart_keyboard(False)
            self.bot.send_message(chat_id, empty_text, keyboard)
            return
        
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\\n\\n"
        total = 0
        
        for item in cart_items:
            item_total = item[2] * item[3]
            total += item_total
            cart_text += f"‚Ä¢ {item[1]} √ó {item[3]} = {format_price(item_total)}\\n"
        
        cart_text += f"\\nüí∞ <b>–ò—Ç–æ–≥–æ: {format_price(total)}</b>"
        
        keyboard = create_cart_keyboard(True)
        self.bot.send_message(chat_id, cart_text, keyboard)
    
    def show_user_orders(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        orders = self.db.get_user_orders(user_id)
        
        if not orders:
            self.bot.send_message(chat_id, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
        
        orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\\n\\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = get_order_status_emoji(order[3])
            orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order[0]} - {format_price(order[2])}\\n"
            orders_text += f"üìÖ {format_date(order[7])}\\n\\n"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, orders_text, keyboard)
    
    def show_user_profile(self, chat_id, user_id, language):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.db.execute_query('SELECT * FROM users WHERE id = ?', (user_id,))[0]
        
        profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\\n\\n"
        profile_text += f"üìù –ò–º—è: {user[2]}\\n"
        if user[3]:
            profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[3]}\\n"
        if user[4]:
            profile_text += f"üìß Email: {user[4]}\\n"
        profile_text += f"üåç –Ø–∑—ã–∫: {'–†—É—Å—Å–∫–∏–π' if user[5] == 'ru' else 'O\\'zbekcha'}\\n"
        profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_date(user[7])}"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, profile_text, keyboard)
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            if data.startswith('add_to_cart_'):
                product_id = int(data.split('_')[3])
                self.add_product_to_cart(chat_id, user_id, product_id)
            elif data.startswith('cart_increase_'):
                cart_item_id = int(data.split('_')[2])
                self.update_cart_item_quantity(chat_id, cart_item_id, 1)
            elif data.startswith('cart_decrease_'):
                cart_item_id = int(data.split('_')[2])
                self.update_cart_item_quantity(chat_id, cart_item_id, -1)
            elif data.startswith('cart_remove_'):
                cart_item_id = int(data.split('_')[2])
                self.remove_cart_item(chat_id, cart_item_id)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    def add_product_to_cart(self, chat_id, user_id, product_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        result = self.db.add_to_cart(user_id, product_id, 1)
        
        if result:
            self.bot.send_message(chat_id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
    
    def send_unknown_command(self, chat_id, language):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        unknown_text = "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ."
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, unknown_text, keyboard)
'''
    
    with open('handlers.py', 'w', encoding='utf-8') as f:
        f.write(handlers_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω handlers.py")

def create_admin_module():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è admin.py"""
    admin_content = '''"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

from keyboards import create_admin_keyboard, create_back_keyboard
from utils import format_price, format_date

class AdminHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.admin_states = {}
        self.notification_manager = None
    
    def handle_admin_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data or not user_data[0][6]:  # is_admin
                self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            if text == '/admin' or text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                self.show_admin_panel(chat_id)
            elif text == 'üì¶ –ó–∞–∫–∞–∑—ã':
                self.show_orders_management(chat_id)
            elif text == 'üõ† –¢–æ–≤–∞—Ä—ã':
                self.show_products_management(chat_id)
            elif text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
                self.show_users_stats(chat_id)
            elif text == 'üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º':
                self.exit_admin_mode(chat_id)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    def show_admin_panel(self, chat_id):
        """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        stats = self.get_basic_stats()
        
        admin_text = f"üõ° <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\\n\\n"
        admin_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\\n"
        admin_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\\n"
        admin_text += f"üõç –¢–æ–≤–∞—Ä–æ–≤: {stats['products']}\\n"
        admin_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['orders']}\\n"
        admin_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(stats['revenue'])}\\n\\n"
        admin_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = create_admin_keyboard()
        self.bot.send_message(chat_id, admin_text, keyboard)
    
    def get_basic_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            users_count = self.db.execute_query('SELECT COUNT(*) FROM users WHERE is_admin = 0')[0][0]
            products_count = self.db.execute_query('SELECT COUNT(*) FROM products WHERE is_active = 1')[0][0]
            orders_count = self.db.execute_query('SELECT COUNT(*) FROM orders')[0][0]
            revenue = self.db.execute_query('SELECT SUM(total_amount) FROM orders WHERE status != "cancelled"')[0][0] or 0
            
            return {
                'users': users_count,
                'products': products_count,
                'orders': orders_count,
                'revenue': revenue
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'users': 0, 'products': 0, 'orders': 0, 'revenue': 0}
    
    def show_orders_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
        recent_orders = self.db.execute_query('''
            SELECT o.id, o.total_amount, o.status, o.created_at, u.name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        
        if not recent_orders:
            self.bot.send_message(chat_id, "üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        orders_text = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\\n\\n"
        
        for order in recent_orders:
            status_emoji = get_order_status_emoji(order[2])
            orders_text += f"{status_emoji} #{order[0]} - {format_price(order[1])}\\n"
            orders_text += f"üë§ {order[4]}\\n"
            orders_text += f"üìÖ {format_date(order[3])}\\n\\n"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, orders_text, keyboard)
    
    def show_products_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
        products = self.db.execute_query('''
            SELECT id, name, price, stock, is_active
            FROM products
            ORDER BY created_at DESC
            LIMIT 10
        ''')
        
        if not products:
            self.bot.send_message(chat_id, "üõç –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        products_text = "üõç <b>–¢–æ–≤–∞—Ä—ã:</b>\\n\\n"
        
        for product in products:
            status = "‚úÖ" if product[4] else "‚ùå"
            products_text += f"{status} {product[1]}\\n"
            products_text += f"üí∞ {format_price(product[2])} | üì¶ {product[3]} —à—Ç.\\n\\n"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, products_text, keyboard)
    
    def show_users_stats(self, chat_id):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        stats = self.db.execute_query('''
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN created_at >= date('now', '-7 days') THEN 1 END) as new_users_week,
                COUNT(CASE WHEN language = 'uz' THEN 1 END) as uzbek_users
            FROM users
            WHERE is_admin = 0
        ''')[0]
        
        users_text = f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\\n\\n"
        users_text += f"üìä –í—Å–µ–≥–æ: {stats[0]}\\n"
        users_text += f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats[1]}\\n"
        users_text += f"üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫: {stats[2]}\\n"
        users_text += f"üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: {stats[0] - stats[2]}"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, users_text, keyboard)
    
    def exit_admin_mode(self, chat_id):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞"""
        welcome_text = "üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º"
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callback'–æ–≤"""
        pass
'''
    
    with open('admin.py', 'w', encoding='utf-8') as f:
        f.write(admin_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω admin.py")

def main():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π...")
    
    if not os.path.exists('handlers.py'):
        create_handlers_module()
    else:
        print("‚úÖ handlers.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    if not os.path.exists('admin.py'):
        create_admin_module()
    else:
        print("‚úÖ admin.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    print("\\nüéâ –í—Å–µ –º–æ–¥—É–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: python main.py")

if __name__ == "__main__":
    main()
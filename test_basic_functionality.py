#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

import os
import sys
from database import DatabaseManager

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = DatabaseManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = db.get_categories()
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories) if categories else 0}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
        products = db.execute_query('SELECT COUNT(*) FROM products WHERE is_active = 1')
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {products[0][0] if products else 0}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        admins = db.execute_query('SELECT COUNT(*) FROM users WHERE is_admin = 1')
        print(f"‚úÖ –ê–¥–º–∏–Ω–æ–≤: {admins[0][0] if admins else 0}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_token():
    """–¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        token = "8292684103:AAH0TKL-lCOaKVeppjtAdmsx0gdeMrGtjdQ"
    
    if token and len(token) > 40 and ':' in token:
        print(f"‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {token[:10]}...{token[-10:]}")
        return True
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return False

def test_modules_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π...")
    
    modules_to_test = [
        'database',
        'handlers', 
        'admin',
        'keyboards',
        'utils',
        'localization',
        'config'
    ]
    
    success_count = 0
    
    for module_name in modules_to_test:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {module_name}: {e}")
    
    print(f"\nüìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(modules_to_test)} –º–æ–¥—É–ª–µ–π")
    return success_count == len(modules_to_test)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞")
    print("=" * 40)
    
    tests = [
        test_token,
        test_modules_import,
        test_database_connection
    ]
    
    passed = 0
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(tests):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python main.py")

if __name__ == "__main__":
    main()
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""

from typing import Dict, Any, Optional, List
from core.logger import logger
from core.utils import format_price, calculate_cart_total, sanitize_text
from core.exceptions import ValidationError
from .keyboards import KeyboardBuilder

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.user_states = {}
        self.keyboards = KeyboardBuilder()
    
    def handle_message(self, message: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if not user_data and text != '/start':
                self._send_registration_prompt(chat_id)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                self._handle_command(message, user_data)
            else:
                self._handle_text_message(message, user_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            self.bot.send_message(
                message['chat']['id'],
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def handle_callback_query(self, callback_query: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            if data.startswith('add_to_cart_'):
                self._handle_add_to_cart(chat_id, data, user_id)
            elif data.startswith('quantity_'):
                self._handle_quantity_selection(chat_id, data, user_id, callback_query)
            elif data.startswith('order_product_'):
                self._handle_order_product(chat_id, data, user_id)
            elif data == 'goto_cart':
                self._show_cart(chat_id, user_id)
            elif data == 'continue_shopping':
                self._show_catalog(chat_id)
            elif data == 'back_to_main':
                self._show_main_menu(chat_id, user_data[0][2])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}", exc_info=True)
    
    def _handle_command(self, message: Dict[str, Any], user_data: Optional[List]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        text = message['text']
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        if text == '/start':
            if user_data:
                self._show_main_menu(chat_id, user_data[0][2])
            else:
                self._start_registration(message)
        elif text == '/help':
            self._show_help(chat_id)
        elif text.startswith('/order_'):
            self._show_order_details(chat_id, text, user_data[0][0])
        elif text == '/admin' and user_data and user_data[0][6]:
            self._show_admin_menu(chat_id)
    
    def _handle_text_message(self, message: Dict[str, Any], user_data: List):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = message['text']
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        user_id = user_data[0][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if telegram_id in self.user_states:
            self._handle_user_state(message, user_data)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–Ω—é
        if text == 'üõç –ö–∞—Ç–∞–ª–æ–≥':
            self._show_catalog(chat_id)
        elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
            self._show_cart(chat_id, user_id)
        elif text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
            self._show_user_orders(chat_id, user_id)
        elif text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            self._show_profile(chat_id, user_data[0])
        elif text == 'üîç –ü–æ–∏—Å–∫':
            self._start_search(chat_id, telegram_id)
        elif text == '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self._show_favorites(chat_id, user_id)
        elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
            self._show_help(chat_id)
        elif text == 'üîô –ù–∞–∑–∞–¥':
            self._show_main_menu(chat_id, user_data[0][2])
        elif text == 'üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
            self._show_catalog(chat_id)
        elif text == 'üè† –ì–ª–∞–≤–Ω–∞—è':
            self._show_main_menu(chat_id, user_data[0][2])
        elif text.startswith('üì±') or text.startswith('üëï') or text.startswith('üè†') or text.startswith('‚öΩ') or text.startswith('üíÑ') or text.startswith('üìö'):
            self._handle_category_selection(chat_id, text)
        elif text.startswith('üõç'):
            self._handle_product_selection(chat_id, text, user_id)
        else:
            # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
            self._search_products(chat_id, text)
    
    def _start_registration(self, message: Dict[str, Any]):
        """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ Telegram
        suggested_name = message['from'].get('first_name', '')
        
        self.user_states[telegram_id] = {
            'state': 'registration_name',
            'data': {}
        }
        
        welcome_text = """
üõç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!</b>

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

üë§ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>
(–¢–æ–ª—å–∫–æ –∏–º—è, –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)
        """
        
        keyboard = {
            'keyboard': [[suggested_name]] if suggested_name else [],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def _handle_user_state(self, message: Dict[str, Any], user_data: List):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = message['from']['id']
        chat_id = message['chat']['id']
        text = message['text']
        
        state_info = self.user_states[telegram_id]
        state = state_info['state']
        
        if state == 'registration_name':
            self._handle_registration_name(message, state_info)
        elif state == 'registration_phone':
            self._handle_registration_phone(message, state_info)
        elif state == 'registration_email':
            self._handle_registration_email(message, state_info)
        elif state == 'search_products':
            self._search_products(chat_id, text)
            del self.user_states[telegram_id]
        elif state == 'checkout_address':
            self._handle_checkout_address(message, user_data[0][0])
        elif state.startswith('quantity_'):
            self._handle_quantity_input(message, state_info, user_data[0][0])
    
    def _handle_checkout_address(self, message: Dict[str, Any], user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
        telegram_id = message['from']['id']
        chat_id = message['chat']['id']
        
        if message.get('text') == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_states[telegram_id]
            self._show_cart(chat_id, user_id)
            return
        
        address = ""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if 'location' in message:
            lat = message['location']['latitude']
            lon = message['location']['longitude']
            address = f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {lat}, {lon}"
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        elif 'text' in message:
            address = sanitize_text(message['text'], 200)
        
        if not address:
            self.bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
        state_info = self.user_states[telegram_id]
        cart_items = state_info['data']['cart_items']
        total = calculate_cart_total(cart_items)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = self.db.create_order(
            user_id=user_id,
            total_amount=total,
            delivery_address=address,
            payment_method="cash"
        )
        
        if order_id:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            for item in cart_items:
                self.db.execute_query('''
                    INSERT INTO order_items (order_id, product_id, quantity, price)
                    VALUES (?, ?, ?, ?)
                ''', (order_id, item[5], item[3], item[2]))
                
                # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ
                self.db.execute_query('''
                    UPDATE products SET stock = stock - ?, sales_count = sales_count + ?
                    WHERE id = ?
                ''', (item[3], item[3], item[5]))
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            self.db.clear_cart(user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del self.user_states[telegram_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success_text = f"""
‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>

üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(cart_items)}
üí∞ –°—É–º–º–∞: {format_price(total)}
üìç –ê–¥—Ä–µ—Å: {address}
üí≥ –û–ø–ª–∞—Ç–∞: –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏

üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
            """
            
            self.bot.send_message(chat_id, success_text, self.keyboards.main_menu())
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            if hasattr(self, 'notification_service'):
                self.notification_service.notify_order_created(order_id)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
            del self.user_states[telegram_id]
    
    def _handle_registration_name(self, message: Dict[str, Any], state_info: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        telegram_id = message['from']['id']
        chat_id = message['chat']['id']
        name = sanitize_text(message['text'], 50)
        
        if len(name) < 2:
            self.bot.send_message(chat_id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É —Å –∏–º–µ–Ω–µ–º
        user_id = self.db.create_user(
            telegram_id=telegram_id,
            name=name
        )
        
        if user_id:
            del self.user_states[telegram_id]
            
            success_text = f"""
‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω, {name}! üéâ

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã

–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõç
            """
            
            self.bot.send_message(chat_id, success_text, self.keyboards.main_menu())
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _handle_registration_phone(self, message: Dict[str, Any], state_info: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        telegram_id = message['from']['id']
        chat_id = message['chat']['id']
        
        phone = None
        if 'contact' in message:
            phone = message['contact']['phone_number']
        elif message['text'] != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            phone = message['text']
        
        state_info['data']['phone'] = phone
        state_info['state'] = 'registration_email'
        
        email_text = "üìß <b>–£–∫–∞–∂–∏—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥."
        
        keyboard = {
            'keyboard': [['‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        self.bot.send_message(chat_id, email_text, keyboard)
    
    def _handle_registration_email(self, message: Dict[str, Any], state_info: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
        telegram_id = message['from']['id']
        chat_id = message['chat']['id']
        
        email = None
        if message['text'] != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            email = message['text']
            if not self._validate_email(email):
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.")
                return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        data = state_info['data']
        user_id = self.db.create_user(
            telegram_id=telegram_id,
            name=data['name'],
            phone=data.get('phone'),
            email=email
        )
        
        if user_id:
            del self.user_states[telegram_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            summary_text = f"""
‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üë§ –ò–º—è: {data['name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone') or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üéâ

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É  
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã

–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõç
            """
            
            self.bot.send_message(chat_id, summary_text, self.keyboards.main_menu())
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            success_text = f"""
‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω, {data['name']}! üéâ

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã

–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõç
            """
            
            self.bot.send_message(chat_id, success_text, self.keyboards.main_menu())
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _show_main_menu(self, chat_id: int, name: str):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        welcome_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:
        """
        
        self.bot.send_message(chat_id, welcome_text, self.keyboards.main_menu())
    
    def _show_catalog(self, chat_id: int):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        categories = self.db.get_categories()
        
        if not categories:
            self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        catalog_text = "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        
        self.bot.send_message(
            chat_id, 
            catalog_text, 
            self.keyboards.categories_menu(categories)
        )
    
    def _show_cart(self, chat_id: int, user_id: int):
        """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            empty_text = """
üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã!
            """
            self.bot.send_message(chat_id, empty_text, self.keyboards.cart_management(False))
            return
        
        total = calculate_cart_total(cart_items)
        
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        
        for item in cart_items:
            item_total = item[2] * item[3]
            cart_text += f"üõç <b>{item[1]}</b>\n"
            cart_text += f"üí∞ {format_price(item[2])} √ó {item[3]} —à—Ç. = <b>{format_price(item_total)}</b>\n"
            cart_text += f"ID —Ç–æ–≤–∞—Ä–∞: {item[5]}\n\n"
        
        cart_text += f"üí≥ <b>–û–±—â–∞—è —Å—É–º–º–∞: {format_price(total)}</b>\n"
        cart_text += f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {len(cart_items)}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        keyboard = self._create_cart_keyboard(cart_items)
        self.bot.send_message(chat_id, cart_text, keyboard)
    
    def _show_user_orders(self, chat_id: int, user_id: int):
        """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        orders = self.db.get_user_orders(user_id)
        
        if not orders:
            no_orders_text = """
üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É!
            """
            self.bot.send_message(chat_id, no_orders_text, self.keyboards.back_button())
            return
        
        orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = self._get_status_emoji(order[3])
            orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order[0]} - {format_price(order[2])}\n"
            orders_text += f"üìÖ {order[7][:16]}\n\n"
        
        self.bot.send_message(chat_id, orders_text, self.keyboards.back_button())
    
    def _show_profile(self, chat_id: int, user_data: List):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üìù –ò–º—è: {user_data[2]}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: {user_data[4] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üåç –Ø–∑—ã–∫: {user_data[5]}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data[7][:10]}
        """
        
        self.bot.send_message(chat_id, profile_text, self.keyboards.back_button())
    
    def _handle_category_selection(self, chat_id: int, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        category_name = text.split(' ', 1)[1] if ' ' in text else text
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categories = self.db.get_categories()
        selected_category = None
        
        for category in categories:
            if category[1] == category_name:
                selected_category = category
                break
        
        if not selected_category:
            self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = self.db.get_products_by_category(selected_category[0])
        
        if not products:
            self.bot.send_message(
                chat_id, 
                f"üì¶ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                self.keyboards.back_button()
            )
            return
        
        category_text = f"üì¶ <b>{selected_category[3]} {selected_category[1]}</b>\n\n"
        category_text += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
        
        self.bot.send_message(
            chat_id, 
            category_text, 
            self.keyboards.products_menu(products)
        )
    
    def _handle_product_selection(self, chat_id: int, text: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if ' - $' in text:
            product_name = text.split(' - $')[0].replace('üõç ', '')
        else:
            product_name = text.replace('üõç ', '')
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä
        products = self.db.search_products(product_name, 1)
        
        if not products:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        product = products[0]
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        self.db.execute_query(
            'UPDATE products SET views = views + 1 WHERE id = ?',
            (product[0],)
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self._show_product_with_quantity(chat_id, product)
    
    def _show_product_with_quantity(self, chat_id: int, product: List):
        """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        product_text = f"üõç <b>{product[1]}</b>\n\n"
        
        if product[2]:
            product_text += f"üìù {product[2]}\n\n"
        
        product_text += f"üí∞ –¶–µ–Ω–∞: <b>{format_price(product[3])}</b>\n"
        product_text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product[7]} —à—Ç.\n"
        product_text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {product[8]}\n"
        product_text += f"üõí –ü—Ä–æ–¥–∞–Ω–æ: {product[9]} —à—Ç."
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
        reviews = self.db.get_product_reviews(product[0])
        if reviews:
            avg_rating = sum(review[0] for review in reviews) / len(reviews)
            product_text += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5 ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)"
        
        product_text += f"\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        keyboard = self.keyboards.product_quantity_selection(product[0], product[7])
        
        if product[6]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.bot.send_photo(chat_id, product[6], product_text, keyboard)
        else:
            self.bot.send_message(chat_id, product_text, keyboard)
    
    def _handle_quantity_selection(self, chat_id: int, data: str, user_id: int, callback_query: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        parts = data.split('_')
        product_id = int(parts[1])
        quantity = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        product = self.db.get_product_by_id(product_id)
        if not product:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        if quantity > product[7]:
            self.bot.send_message(chat_id, f"‚ùå –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ {product[7]} —à—Ç.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        confirm_text = f"""
üõç <b>{product[1]}</b>

üí∞ –¶–µ–Ω–∞: {format_price(product[3])}
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.
üí≥ <b>–ò—Ç–æ–≥–æ: {format_price(product[3] * quantity)}</b>

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:
        """
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å', 'callback_data': f'order_product_{product_id}_{quantity}'},
                    {'text': 'üõí –í –∫–æ—Ä–∑–∏–Ω—É', 'callback_data': f'add_to_cart_{product_id}_{quantity}'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', 'callback_data': f'back_to_product_{product_id}'}
                ]
            ]
        }
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            self.bot.edit_message_reply_markup(
                chat_id, 
                callback_query['message']['message_id'], 
                keyboard
            )
            self.bot.send_message(chat_id, confirm_text, keyboard)
        except:
            self.bot.send_message(chat_id, confirm_text, keyboard)
    
    def _handle_add_to_cart(self, chat_id: int, data: str, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        parts = data.split('_')
        product_id = int(parts[3])
        quantity = int(parts[4]) if len(parts) > 4 else 1
        
        result = self.db.add_to_cart(user_id, product_id, quantity)
        
        if result:
            product = self.db.get_product_by_id(product_id)
            success_text = f"‚úÖ <b>{product[1]}</b> ({quantity} —à—Ç.) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"
            
            keyboard = {
                'inline_keyboard': [
                    [
                        {'text': 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data': 'goto_cart'},
                        {'text': 'üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'callback_data': 'continue_shopping'}
                    ]
                ]
            }
            
            self.bot.send_message(chat_id, success_text, keyboard)
        else:
            self.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")
    
    def _handle_order_product(self, chat_id: int, data: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞"""
        parts = data.split('_')
        product_id = int(parts[2])
        quantity = int(parts[3])
        
        product = self.db.get_product_by_id(product_id)
        if not product:
            return
        
        total_amount = product[3] * quantity
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = self.db.create_order(
            user_id=user_id,
            total_amount=total_amount,
            delivery_address="–ù–µ —É–∫–∞–∑–∞–Ω",
            payment_method="cash"
        )
        
        if order_id:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑
            self.db.execute_query('''
                INSERT INTO order_items (order_id, product_id, quantity, price)
                VALUES (?, ?, ?, ?)
            ''', (order_id, product_id, quantity, product[3]))
            
            # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            self.db.execute_query('''
                UPDATE products SET stock = stock - ?, sales_count = sales_count + ?
                WHERE id = ?
            ''', (quantity, quantity, product_id))
            
            success_text = f"""
‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üõç –¢–æ–≤–∞—Ä: {product[1]}
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.
üí∞ –°—É–º–º–∞: {format_price(total_amount)}

üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
            """
            
            keyboard = {
                'inline_keyboard': [
                    [
                        {'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data': 'back_to_main'}
                    ]
                ]
            }
            
            self.bot.send_message(chat_id, success_text, keyboard)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            if hasattr(self, 'notification_service'):
                self.notification_service.notify_order_created(order_id)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    
    def _search_products(self, chat_id: int, query: str):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        products = self.db.search_products(query, 10)
        
        if not products:
            not_found_text = f"""
üîç <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            """
            self.bot.send_message(chat_id, not_found_text, self.keyboards.back_button())
            return
        
        search_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'</b>\n\n"
        search_text += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
        
        for product in products[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            search_text += f"üõç <b>{product[1]}</b>\n"
            search_text += f"üí∞ {format_price(product[3])}\n"
            search_text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product[7]} —à—Ç.\n\n"
        
        self.bot.send_message(chat_id, search_text, self.keyboards.back_button())
    
    def _start_search(self, chat_id: int, telegram_id: int):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
        self.user_states[telegram_id] = {'state': 'search_products'}
        
        search_text = """
üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:
        """
        
        keyboard = {
            'keyboard': [['üîô –û—Ç–º–µ–Ω–∞']],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        self.bot.send_message(chat_id, search_text, keyboard)
    
    def _show_favorites(self, chat_id: int, user_id: int):
        """–ü–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        favorites = self.db.get_user_favorites(user_id)
        
        if not favorites:
            empty_text = """
‚ù§Ô∏è <b>–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç</b>

–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!
            """
            self.bot.send_message(chat_id, empty_text, self.keyboards.back_button())
            return
        
        favorites_text = "‚ù§Ô∏è <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b>\n\n"
        
        for product in favorites[:10]:
            favorites_text += f"üõç <b>{product[1]}</b>\n"
            favorites_text += f"üí∞ {format_price(product[3])}\n"
            favorites_text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product[7]} —à—Ç.\n\n"
        
        self.bot.send_message(chat_id, favorites_text, self.keyboards.back_button())
    
    def _show_help(self, chat_id: int):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üõç <b>–ö–∞—Ç–∞–ª–æ–≥</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b> - –≤–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
üìã <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b> - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
üîç <b>–ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
‚ù§Ô∏è <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b> - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã

<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å" –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4Ô∏è‚É£ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        self.bot.send_message(chat_id, help_text, self.keyboards.back_button())
    
    def _validate_email(self, email: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
        import re
        if not email or len(email) < 5:
            return False
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email))
    
    def _validate_phone(self, phone: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        import re
        if not phone:
            return False
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        clean_phone = re.sub(r'[^\d+]', '', phone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        patterns = [
            r'^\+998\d{9}$',      # +998901234567
            r'^998\d{9}$',        # 998901234567
            r'^\d{9}$',           # 901234567
            r'^\+\d{10,15}$',     # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        ]
        
        for pattern in patterns:
            if re.match(pattern, clean_phone):
                return True
        
        return False
    
    def _get_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        emojis = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ',
            'shipped': 'üöö',
            'delivered': 'üì¶',
            'cancelled': '‚ùå'
        }
        return emojis.get(status, '‚ùì')
    
    def _show_admin_menu(self, chat_id: int):
        """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
        admin_text = """
üõ° <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        """
        
        self.bot.send_message(chat_id, admin_text, self.keyboards.admin_menu())
    
    def _send_registration_prompt(self, chat_id: int):
        """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        prompt_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.

–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        
        self.bot.send_message(chat_id, prompt_text)
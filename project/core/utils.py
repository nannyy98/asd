"""
–£—Ç–∏–ª–∏—Ç—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
"""

import re
from datetime import datetime
from typing import Optional, Union
from decimal import Decimal

def format_price(price: Union[float, Decimal, int]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return f"${float(price):.2f}"

def format_date(date_input: Union[str, datetime]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    try:
        if isinstance(date_input, str):
            if 'T' in date_input:
                date_obj = datetime.fromisoformat(date_input.replace('Z', '+00:00'))
            else:
                date_obj = datetime.strptime(date_input, '%Y-%m-%d %H:%M:%S')
        else:
            date_obj = date_input
        return date_obj.strftime('%d.%m.%Y %H:%M')
    except Exception:
        return str(date_input)

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
    if not email:
        return True
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

def validate_phone(phone: str) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not phone:
        return None
    
    clean_phone = re.sub(r'[^\d+]', '', phone)
    if len(clean_phone) >= 10 and (clean_phone.startswith('+') or clean_phone.isdigit()):
        return clean_phone
    return None

def sanitize_text(text: str, max_length: int = 1000) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    dangerous_chars = ['<', '>', '"', "'", '&', '\x00']
    for char in dangerous_chars:
        text = text.replace(char, '')
    
    return text[:max_length]

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    return (str(text)
            .replace('&', '&amp;')
            .replace('<', '&lt;')
            .replace('>', '&gt;')
            .replace('"', '&quot;')
            .replace("'", '&#x27;'))

def calculate_cart_total(cart_items: list) -> float:
    """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã"""
    return sum(item[2] * item[3] for item in cart_items)

def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        'pending': '‚è≥',
        'confirmed': '‚úÖ',
        'shipped': 'üöö',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    }
    return status_emojis.get(status, '‚ùì')

def create_stars_display(rating: float) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    full_stars = int(rating)
    half_star = 1 if rating - full_stars >= 0.5 else 0
    empty_stars = 5 - full_stars - half_star
    
    stars = '‚≠ê' * full_stars
    if half_star:
        stars += '‚ú®'
    stars += '‚òÜ' * empty_stars
    
    return stars
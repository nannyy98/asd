"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import threading
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any
from queue import Queue

from core.logger import logger
from core.utils import format_price, format_date
from core.exceptions import NotificationError

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.notification_queue = Queue()
        self.start_notification_worker()
    
    def start_notification_worker(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        def worker():
            while True:
                try:
                    if not self.notification_queue.empty():
                        notification = self.notification_queue.get()
                        self._process_notification(notification)
                    time.sleep(1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                    time.sleep(5)
        
        thread = threading.Thread(target=worker, daemon=True)
        thread.start()
        logger.info("–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def send_notification(self, user_id: int, title: str, message: str, 
                         notification_type: str = 'info', delay_seconds: int = 0):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification = {
            'user_id': user_id,
            'title': title,
            'message': message,
            'type': notification_type,
            'scheduled_time': datetime.now() + timedelta(seconds=delay_seconds),
            'attempts': 0,
            'max_attempts': 3
        }
        
        self.notification_queue.put(notification)
    
    def _process_notification(self, notification: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if datetime.now() < notification['scheduled_time']:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø—Ä–∏—à–ª–æ
            self.notification_queue.put(notification)
            return
        
        try:
            user = self.db.execute_query(
                'SELECT telegram_id, language FROM users WHERE id = ?',
                (notification['user_id'],)
            )
            
            if not user:
                return
            
            telegram_id, language = user[0]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            type_emojis = {
                'order': 'üì¶',
                'payment': 'üí≥',
                'delivery': 'üöö',
                'promotion': 'üéÅ',
                'reminder': '‚è∞',
                'success': '‚úÖ',
                'info': '‚ÑπÔ∏è'
            }
            
            emoji = type_emojis.get(notification['type'], 'üì±')
            formatted_message = f"{emoji} <b>{notification['title']}</b>\n\n{notification['message']}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            result = self.bot.send_message(telegram_id, formatted_message)
            
            if result and result.get('ok'):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                self.db.add_notification(
                try:
                    time.sleep(240)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 4 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    notification['user_id'],
                    notification['title'],
                    notification['message'],
                    notification['type']
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            else:
                raise NotificationError("Failed to send message")
                
        except Exception as e:
            notification['attempts'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            if notification['attempts'] < notification['max_attempts']:
                notification['scheduled_time'] = datetime.now() + timedelta(minutes=5)
                self.notification_queue.put(notification)
    
    def notify_order_created(self, order_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
        order_details = self.db.get_order_details(order_id)
        if not order_details:
            return
        
        order = order_details['order']
        user = self.db.execute_query(
            'SELECT name FROM users WHERE id = ?',
            (order[1],)
        )[0]
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        customer_message = f"""
‚úÖ <b>–ó–∞–∫–∞–∑ #{order[0]} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üí∞ –°—É–º–º–∞: {format_price(order[2])}
üìÖ –î–∞—Ç–∞: {format_date(order[9])}

üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
        """
        
        self.send_notification(
            order[1], 
            f"–ó–∞–∫–∞–∑ #{order[0]} —Å–æ–∑–¥–∞–Ω",
            customer_message,
            'order'
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        self._notify_admins_new_order(order_id, order, user[0])
    
    def _notify_admins_new_order(self, order_id: int, order: List, customer_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        admin_message = f"""
üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order[0]}</b>

üë§ –ö–ª–∏–µ–Ω—Ç: {customer_name}
üí∞ –°—É–º–º–∞: {format_price(order[2])}
üìÖ –í—Ä–µ–º—è: {format_date(order[9])}
üí≥ –û–ø–ª–∞—Ç–∞: {order[5]}

üëÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /admin
        """
        
        admins = self.db.execute_query(
            'SELECT telegram_id FROM users WHERE is_admin = 1'
        )
        
        for admin in admins:
            try:
                self.bot.send_message(admin[0], admin_message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin[0]}: {e}")
    
    def notify_order_status_changed(self, order_id: int, new_status: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        order_details = self.db.get_order_details(order_id)
        if not order_details:
            return
        
        order = order_details['order']
        user = self.db.execute_query(
            'SELECT telegram_id, name FROM users WHERE id = ?',
            (order[1],)
        )[0]
        
        status_messages = {
            'confirmed': '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
            'shipped': '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É—Ç–∏',
            'delivered': '—É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω'
        }
        
        status_text = status_messages.get(new_status, new_status)
        
        message = f"""
üì¶ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order[0]}</b>

–í–∞—à –∑–∞–∫–∞–∑ {status_text}.

üí∞ –°—É–º–º–∞: {format_price(order[2])}
üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {format_date(order[9])}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!
        """
        
        self.send_notification(
            order[1],
            f"–ó–∞–∫–∞–∑ #{order[0]} {new_status}",
            message,
            'order'
        )
    
    def send_promotional_broadcast(self, message: str, target_group: str = 'all') -> tuple:
        """–ü—Ä–æ–º–æ —Ä–∞—Å—Å—ã–ª–∫–∞"""
        if target_group == 'all':
            users = self.db.execute_query(
                'SELECT telegram_id FROM users WHERE is_admin = 0'
            )
        elif target_group == 'active':
            users = self.db.execute_query('''
                SELECT DISTINCT u.telegram_id
                FROM users u
                JOIN orders o ON u.id = o.user_id
                WHERE u.is_admin = 0 AND o.created_at >= datetime('now', '-30 days')
            ''')
        else:
            return 0, 0
        
        success_count = 0
        error_count = 0
        
        for user in users:
            try:
                time.sleep(240)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 4 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                result = self.bot.send_message(user[0], message)
                if result and result.get('ok'):
                    success_count += 1
                else:
                    error_count += 1
            except Exception as e:
                error_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
        
        return success_count, error_count
"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

from core.logger import logger
from core.utils import format_price, format_date

class AnalyticsService:
    """–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, db):
        self.db = db
    
    def get_sales_report(self, start_date: str, end_date: str) -> Dict[str, Any]:
        """–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            sales_data = self.db.execute_query('''
                SELECT 
                    COUNT(*) as orders_count,
                    COALESCE(SUM(total_amount), 0) as revenue,
                    COALESCE(AVG(total_amount), 0) as avg_order_value,
                    COUNT(DISTINCT user_id) as unique_customers
                FROM orders 
                WHERE DATE(created_at) BETWEEN ? AND ?
                AND status != 'cancelled'
            ''', (start_date, end_date))
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã
            top_products = self.db.execute_query('''
                SELECT 
                    p.name,
                    SUM(oi.quantity) as units_sold,
                    SUM(oi.quantity * oi.price) as revenue
                FROM order_items oi
                JOIN products p ON oi.product_id = p.id
                JOIN orders o ON oi.order_id = o.id
                WHERE DATE(o.created_at) BETWEEN ? AND ?
                AND o.status != 'cancelled'
                GROUP BY p.id, p.name
                ORDER BY revenue DESC
                LIMIT 10
            ''', (start_date, end_date))
            
            # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º
            daily_sales = self.db.execute_query('''
                SELECT 
                    DATE(created_at) as date,
                    COUNT(*) as orders,
                    SUM(total_amount) as revenue
                FROM orders
                WHERE DATE(created_at) BETWEEN ? AND ?
                AND status != 'cancelled'
                GROUP BY DATE(created_at)
                ORDER BY date
            ''', (start_date, end_date))
            
            return {
                'period': f"{start_date} - {end_date}",
                'summary': sales_data[0] if sales_data else (0, 0, 0, 0),
                'top_products': top_products or [],
                'daily_sales': daily_sales or []
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: {e}")
            return {
                'period': f"{start_date} - {end_date}",
                'summary': (0, 0, 0, 0),
                'top_products': [],
                'daily_sales': []
            }
    
    def get_customer_analytics(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            customer_segments = self.db.execute_query('''
                SELECT 
                    CASE 
                        WHEN total_spent >= 1000 THEN 'VIP'
                        WHEN total_spent >= 500 THEN 'Premium'
                        WHEN total_spent >= 100 THEN 'Regular'
                        WHEN total_spent > 0 THEN 'New'
                        ELSE 'Inactive'
                    END as segment,
                    COUNT(*) as count,
                    AVG(total_spent) as avg_spent
                FROM (
                    SELECT 
                        u.id,
                        COALESCE(SUM(o.total_amount), 0) as total_spent
                    FROM users u
                    LEFT JOIN orders o ON u.id = o.user_id AND o.status != 'cancelled'
                    WHERE u.is_admin = 0
                    GROUP BY u.id
                ) customer_stats
                GROUP BY segment
                ORDER BY avg_spent DESC
            ''')
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            weekly_activity = self.db.execute_query('''
                SELECT 
                    CASE strftime('%w', created_at)
                        WHEN '0' THEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                        WHEN '1' THEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
                        WHEN '2' THEN '–í—Ç–æ—Ä–Ω–∏–∫'
                        WHEN '3' THEN '–°—Ä–µ–¥–∞'
                        WHEN '4' THEN '–ß–µ—Ç–≤–µ—Ä–≥'
                        WHEN '5' THEN '–ü—è—Ç–Ω–∏—Ü–∞'
                        WHEN '6' THEN '–°—É–±–±–æ—Ç–∞'
                    END as day_name,
                    COUNT(*) as orders_count,
                    SUM(total_amount) as revenue
                FROM orders
                WHERE created_at >= datetime('now', '-30 days')
                AND status != 'cancelled'
                GROUP BY strftime('%w', created_at)
                ORDER BY strftime('%w', created_at)
            ''')
            
            return {
                'customer_segments': customer_segments or [],
                'weekly_activity': weekly_activity or []
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return {
                'customer_segments': [],
                'weekly_activity': []
            }
    
    def get_product_performance(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
            top_selling = self.db.execute_query('''
                SELECT 
                    p.name,
                    p.price,
                    p.stock,
                    SUM(oi.quantity) as total_sold,
                    SUM(oi.quantity * oi.price) as revenue,
                    p.views,
                    ROUND(SUM(oi.quantity) * 100.0 / p.views, 2) as conversion_rate
                FROM products p
                LEFT JOIN order_items oi ON p.id = oi.product_id
                LEFT JOIN orders o ON oi.order_id = o.id AND o.status != 'cancelled'
                WHERE p.is_active = 1
                GROUP BY p.id, p.name, p.price, p.stock, p.views
                ORDER BY revenue DESC
                LIMIT 20
            ''')
            
            # –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π
            low_conversion = self.db.execute_query('''
                SELECT 
                    p.name,
                    p.views,
                    COALESCE(SUM(oi.quantity), 0) as sales,
                    ROUND(COALESCE(SUM(oi.quantity), 0) * 100.0 / NULLIF(p.views, 0), 2) as conversion_rate
                FROM products p
                LEFT JOIN order_items oi ON p.id = oi.product_id
                LEFT JOIN orders o ON oi.order_id = o.id AND o.status != 'cancelled'
                WHERE p.is_active = 1 AND p.views > 10
                GROUP BY p.id, p.name, p.views
                HAVING conversion_rate < 5
                ORDER BY p.views DESC
                LIMIT 10
            ''')
            
            return {
                'top_selling': top_selling or [],
                'low_conversion': low_conversion or []
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return {
                'top_selling': [],
                'low_conversion': []
            }
    
    def format_sales_report(self, report: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"""
        if not report or not report['summary']:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"
        
        summary = report['summary']
        
        text = f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</b>\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {report['period']}\n\n"
        text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {summary[0]}\n"
        text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(summary[1])}\n"
        text += f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_price(summary[2])}\n"
        text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary[3]}\n\n"
        
        if report['top_products']:
            text += f"üèÜ <b>–¢–æ–ø —Ç–æ–≤–∞—Ä—ã:</b>\n"
            for i, product in enumerate(report['top_products'][:5], 1):
                text += f"{i}. {product[0]} - {product[1]} —à—Ç. ({format_price(product[2])})\n"
        
        return text
"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
"""

from datetime import datetime, timedelta
from utils import format_price, format_date, log_user_action
from keyboards import create_admin_keyboard, create_confirmation_keyboard
try:
    from localization import t
except ImportError:
    def t(key, **kwargs):
        return key

class AdminHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.admin_states = {}
        self.notification_manager = None
    
    def handle_admin_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not self.is_admin(telegram_id):
            self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if text == '/admin' or text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            self.show_admin_panel(chat_id)
        elif text == 'üì¶ –ó–∞–∫–∞–∑—ã':
            self.show_orders_management(chat_id)
        elif text == 'üõ† –¢–æ–≤–∞—Ä—ã':
            self.show_products_management(chat_id)
        elif text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            self.show_users_management(chat_id)
        elif text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
            self.show_analytics_menu(chat_id)
        elif text == 'üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
            self.show_security_menu(chat_id)
        elif text == 'üí∞ –§–∏–Ω–∞–Ω—Å—ã':
            self.show_financial_menu(chat_id)
        elif text == 'üì¶ –°–∫–ª–∞–¥':
            self.show_inventory_menu(chat_id)
        elif text == 'ü§ñ AI':
            self.show_ai_menu(chat_id)
        elif text == 'üéØ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è':
            self.show_automation_menu(chat_id)
        elif text == 'üë• CRM':
            self.show_crm_menu(chat_id)
        elif text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
            self.show_broadcast_menu(chat_id)
        elif text == 'üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º':
            self.exit_admin_mode(chat_id)
        else:
            self.bot.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞")
    
    def is_admin(self, telegram_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            admin_check = self.db.execute_query(
                'SELECT is_admin FROM users WHERE telegram_id = ?',
                (telegram_id,)
            )
            return admin_check and admin_check[0][0] == 1
        except:
            return False
    
    def show_admin_panel(self, chat_id):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.get_basic_stats()
        
        admin_text = f"üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        admin_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        admin_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
        admin_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['orders_count']}\n"
        admin_text += f"üõç –¢–æ–≤–∞—Ä–æ–≤: {stats['products_count']}\n"
        admin_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(stats['total_revenue'])}\n\n"
        admin_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è:\n"
        admin_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['today_orders']}\n"
        admin_text += f"üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(stats['today_revenue'])}\n"
        
        self.bot.send_message(
            chat_id, admin_text,
            reply_markup=create_admin_keyboard()
        )
    
    def get_basic_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            users_count = self.db.execute_query('SELECT COUNT(*) FROM users WHERE is_admin = 0')[0][0]
            orders_count = self.db.execute_query('SELECT COUNT(*) FROM orders')[0][0]
            products_count = self.db.execute_query('SELECT COUNT(*) FROM products WHERE is_active = 1')[0][0]
            
            total_revenue = self.db.execute_query(
                'SELECT SUM(total_amount) FROM orders WHERE status != "cancelled"'
            )[0][0] or 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            today_orders = self.db.execute_query(
                'SELECT COUNT(*) FROM orders WHERE DATE(created_at) = ?',
                (today,)
            )[0][0]
            
            today_revenue = self.db.execute_query(
                'SELECT SUM(total_amount) FROM orders WHERE DATE(created_at) = ? AND status != "cancelled"',
                (today,)
            )[0][0] or 0
            
            return {
                'users_count': users_count,
                'orders_count': orders_count,
                'products_count': products_count,
                'total_revenue': total_revenue,
                'today_orders': today_orders,
                'today_revenue': today_revenue
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'users_count': 0,
                'orders_count': 0,
                'products_count': 0,
                'total_revenue': 0,
                'today_orders': 0,
                'today_revenue': 0
            }
    
    def show_orders_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        recent_orders = self.db.execute_query('''
            SELECT o.id, u.name, o.total_amount, o.status, o.created_at
            FROM orders o
            JOIN users u ON o.user_id = u.id
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        
        orders_text = "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        
        if recent_orders:
            orders_text += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n"
            for order in recent_orders:
                status_emoji = self.get_status_emoji(order[3])
                orders_text += f"{status_emoji} #{order[0]} - {order[1]} - {format_price(order[2])}\n"
                orders_text += f"   üìÖ {format_date(order[4])}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = {
                'inline_keyboard': []
            }
            
            for order in recent_orders[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤
                keyboard['inline_keyboard'].append([
                    {'text': f"üì¶ –ó–∞–∫–∞–∑ #{order[0]}", 'callback_data': f'order_details_{order[0]}'}
                ])
            
            keyboard['inline_keyboard'].append([
                {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
            ])
            
            self.bot.send_message(chat_id, orders_text, reply_markup=keyboard)
        else:
            orders_text += "üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            self.bot.send_message(chat_id, orders_text)
    
    def get_status_emoji(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        emojis = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ',
            'shipped': 'üöö',
            'delivered': 'üì¶',
            'cancelled': '‚ùå'
        }
        return emojis.get(status, '‚ùì')
    
    def show_products_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
        products = self.db.execute_query('''
            SELECT id, name, price, stock, is_active
            FROM products
            ORDER BY created_at DESC
            LIMIT 10
        ''')
        
        products_text = "üõç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        
        if products:
            for product in products:
                status = "‚úÖ" if product[4] else "‚ùå"
                products_text += f"{status} <b>{product[1]}</b>\n"
                products_text += f"   üí∞ {format_price(product[2])} | üì¶ {product[3]} —à—Ç.\n"
        
            # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
            keyboard = {
                'inline_keyboard': []
            }
            
            for product in products[:5]:
                keyboard['inline_keyboard'].append([
                    {'text': f"üìù {product[1]}", 'callback_data': f'edit_product_{product[0]}'}
                ])
            
            keyboard['inline_keyboard'].append([
                {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'callback_data': 'add_new_product'},
                {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
            ])
            
            self.bot.send_message(chat_id, products_text, reply_markup=keyboard)
        else:
            products_text += "üì≠ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            self.bot.send_message(chat_id, products_text)
    
    def show_users_management(self, chat_id):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        users_stats = self.db.execute_query('''
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN created_at >= datetime('now', '-7 days') THEN 1 END) as new_users,
                COUNT(CASE WHEN id IN (SELECT DISTINCT user_id FROM orders) THEN 1 END) as buyers
            FROM users
            WHERE is_admin = 0
        ''')[0]
        
        users_text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        users_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        users_text += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_stats[0]}\n"
        users_text += f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users_stats[1]}\n"
        users_text += f"üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {users_stats[2]}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'users_detailed_stats'},
                    {'text': 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'callback_data': 'users_broadcast'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, users_text, reply_markup=keyboard)
    
    def show_analytics_menu(self, chat_id):
        """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_text = "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</b>\n\n"
        analytics_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üìä –ü—Ä–æ–¥–∞–∂–∏', 'callback_data': 'analytics_sales'},
                    {'text': 'üë• –ö–ª–∏–µ–Ω—Ç—ã', 'callback_data': 'analytics_customers'}
                ],
                [
                    {'text': 'üì¶ –¢–æ–≤–∞—Ä—ã', 'callback_data': 'analytics_products'},
                    {'text': 'üí∞ –§–∏–Ω–∞–Ω—Å—ã', 'callback_data': 'analytics_finance'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, analytics_text, reply_markup=keyboard)
    
    def show_security_menu(self, chat_id):
        """–ú–µ–Ω—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        security_text = "üõ° <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        security_text += "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞—â–∏—Ç–∞:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üö® –õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'callback_data': 'security_logs'},
                    {'text': 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', 'callback_data': 'security_blocked'}
                ],
                [
                    {'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç–∞–∫', 'callback_data': 'security_stats'},
                    {'text': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'security_settings'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, security_text, reply_markup=keyboard)
    
    def show_financial_menu(self, chat_id):
        """–ú–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
        financial_text = "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å</b>\n\n"
        financial_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üìä P&L –æ—Ç—á–µ—Ç', 'callback_data': 'finance_pl'},
                    {'text': 'üí∏ Cash Flow', 'callback_data': 'finance_cashflow'}
                ],
                [
                    {'text': 'üèõ –ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç', 'callback_data': 'finance_tax'},
                    {'text': 'üìà ROI –∞–Ω–∞–ª–∏–∑', 'callback_data': 'finance_roi'}
                ],
                [
                    {'text': 'üìã –≠–∫—Å–ø–æ—Ä—Ç CSV', 'callback_data': 'finance_export'},
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, financial_text, reply_markup=keyboard)
    
    def show_inventory_menu(self, chat_id):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º"""
        inventory_text = "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º</b>\n\n"
        inventory_text += "–°–∫–ª–∞–¥—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üìä –°–≤–æ–¥–∫–∞ —Å–∫–ª–∞–¥–∞', 'callback_data': 'inventory_summary'},
                    {'text': 'üîÑ –î–≤–∏–∂–µ–Ω–∏—è', 'callback_data': 'inventory_movements'}
                ],
                [
                    {'text': 'üìà ABC –∞–Ω–∞–ª–∏–∑', 'callback_data': 'inventory_abc'},
                    {'text': '‚ö° –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', 'callback_data': 'inventory_turnover'}
                ],
                [
                    {'text': 'üöö –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏', 'callback_data': 'inventory_suppliers'},
                    {'text': '‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏', 'callback_data': 'inventory_low_stock'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, inventory_text, reply_markup=keyboard)
    
    def show_ai_menu(self, chat_id):
        """–ú–µ–Ω—é AI —Ñ—É–Ω–∫—Ü–∏–π"""
        ai_text = "ü§ñ <b>AI —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        ai_text += "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'callback_data': 'ai_recommendations'},
                    {'text': 'üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–∞', 'callback_data': 'ai_search_analysis'}
                ],
                [
                    {'text': 'üìä –ü—Ä–æ–≥–Ω–æ–∑—ã', 'callback_data': 'ai_predictions'},
                    {'text': 'üé≠ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è', 'callback_data': 'ai_segmentation'}
                ],
                [
                    {'text': 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'callback_data': 'ai_support_stats'},
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, ai_text, reply_markup=keyboard)
    
    def show_automation_menu(self, chat_id):
        """–ú–µ–Ω—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        automation_text = "üéØ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b>\n\n"
        automation_text += "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üõí –ë—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã', 'callback_data': 'auto_abandoned_cart'},
                    {'text': 'üîÑ –í–æ–∑–≤—Ä–∞—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤', 'callback_data': 'auto_win_back'}
                ],
                [
                    {'text': '‚¨ÜÔ∏è Upsell –∫–∞–º–ø–∞–Ω–∏–∏', 'callback_data': 'auto_upsell'},
                    {'text': 'üîÄ Cross-sell', 'callback_data': 'auto_cross_sell'}
                ],
                [
                    {'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'auto_stats'},
                    {'text': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data': 'auto_settings'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, automation_text, reply_markup=keyboard)
    
    def show_crm_menu(self, chat_id):
        """–ú–µ–Ω—é CRM"""
        crm_text = "üë• <b>CRM –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</b>\n\n"
        crm_text += "–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üéØ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è', 'callback_data': 'crm_segmentation'},
                    {'text': 'üìä –ü—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'callback_data': 'crm_profiles'}
                ],
                [
                    {'text': 'üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', 'callback_data': 'crm_offers'},
                    {'text': 'üìà –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è', 'callback_data': 'crm_behavior'}
                ],
                [
                    {'text': '‚ö†Ô∏è –†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞', 'callback_data': 'crm_churn_risk'},
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, crm_text, reply_markup=keyboard)
    
    def show_broadcast_menu(self, chat_id):
        """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
        broadcast_text = "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
        broadcast_text += "–ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'callback_data': 'broadcast_all'},
                    {'text': 'üéØ –ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º', 'callback_data': 'broadcast_segments'}
                ],
                [
                    {'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫', 'callback_data': 'broadcast_stats'},
                    {'text': 'üìù –®–∞–±–ª–æ–Ω—ã', 'callback_data': 'broadcast_templates'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, broadcast_text, reply_markup=keyboard)
    
    def exit_admin_mode(self, chat_id):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞"""
        from keyboards import create_main_keyboard
        
        self.bot.send_message(
            chat_id,
            "üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º",
            reply_markup=create_main_keyboard()
        )
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        if data.startswith('analytics_'):
            self.handle_analytics_callback(callback_query)
        elif data.startswith('finance_'):
            self.handle_finance_callback(callback_query)
        elif data.startswith('inventory_'):
            self.handle_inventory_callback(callback_query)
        elif data.startswith('ai_'):
            self.handle_ai_callback(callback_query)
        elif data.startswith('auto_'):
            self.handle_automation_callback(callback_query)
        elif data.startswith('crm_'):
            self.handle_crm_callback(callback_query)
        elif data.startswith('broadcast_'):
            self.handle_broadcast_callback(callback_query)
        elif data == 'admin_back':
            self.show_admin_panel(chat_id)
        elif data.startswith('order_details_'):
            self.handle_orders_management_callback(callback_query)
        elif data.startswith('change_status_'):
            self.handle_orders_management_callback(callback_query)
        else:
            self.bot.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞")
    
    def handle_orders_management_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        if data.startswith('order_details_'):
            order_id = int(data.split('_')[-1])
            self.show_detailed_order_info(chat_id, order_id)
        elif data.startswith('change_status_'):
            parts = data.split('_')
            order_id = int(parts[2])
            new_status = parts[3]
            self.change_order_status(chat_id, order_id, new_status)
    
    def show_detailed_order_info(self, chat_id, order_id):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        order_details = self.db.get_order_details(order_id)
        
        if not order_details:
            self.bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        order = order_details['order']
        items = order_details['items']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        user = self.db.execute_query(
            'SELECT name, phone, email FROM users WHERE id = ?',
            (order[1],)
        )[0]
        
        details_text = f"üì¶ <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
        details_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {user[0]}\n"
        if user[1]:
            details_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[1]}\n"
        if user[2]:
            details_text += f"üìß Email: {user[2]}\n"
        
        details_text += f"\nüí∞ –°—É–º–º–∞: {format_price(order[2])}\n"
        details_text += f"üìä –°—Ç–∞—Ç—É—Å: {self.get_status_emoji(order[3])} {order[3]}\n"
        details_text += f"üìÖ –î–∞—Ç–∞: {format_date(order[9])}\n"
        
        if order[4]:
            details_text += f"üìç –ê–¥—Ä–µ—Å: {order[4]}\n"
        
        details_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {order[5]}\n"
        
        details_text += f"\nüõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for item in items:
            item_total = item[0] * item[1]
            details_text += f"‚Ä¢ {item[2]} √ó {item[0]} = {format_price(item_total)}\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'callback_data': f'change_status_{order_id}_confirmed'},
                    {'text': 'üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'callback_data': f'change_status_{order_id}_shipped'}
                ],
                [
                    {'text': 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', 'callback_data': f'change_status_{order_id}_delivered'},
                    {'text': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'callback_data': f'change_status_{order_id}_cancelled'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_orders'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, details_text, reply_markup=keyboard)
    
    def change_order_status(self, chat_id, order_id, new_status):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        result = self.db.update_order_status(order_id, new_status)
        
        if result:
            status_emoji = self.get_status_emoji(new_status)
            self.bot.send_message(
                chat_id, 
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_emoji} {new_status}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if self.notification_manager:
                self.notification_manager.send_order_status_notification(order_id, new_status)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    def handle_analytics_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        if data == 'analytics_sales':
            self.show_sales_analytics(chat_id)
        elif data == 'analytics_customers':
            self.show_customer_analytics(chat_id)
        elif data == 'analytics_products':
            self.show_product_analytics(chat_id)
        elif data == 'analytics_finance':
            self.show_financial_analytics(chat_id)
    
    def show_sales_analytics(self, chat_id):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        try:
            from analytics import AnalyticsManager
            analytics = AnalyticsManager(self.db)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            report = analytics.get_sales_report()
            formatted_report = analytics.format_sales_report(report)
            
            self.bot.send_message(chat_id, formatted_report)
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    def show_customer_analytics(self, chat_id):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            from crm import CRMManager
            crm = CRMManager(self.db)
            
            segments = crm.segment_customers()
            
            analytics_text = "üë• <b>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
            for segment_name, customers in segments.items():
                if customers:
                    analytics_text += f"üè∑ <b>{segment_name.title()}:</b> {len(customers)} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            
            self.bot.send_message(chat_id, analytics_text)
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CRM –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def show_product_analytics(self, chat_id):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
            top_products = self.db.execute_query('''
                SELECT p.name, SUM(oi.quantity) as sold, SUM(oi.quantity * oi.price) as revenue
                FROM products p
                JOIN order_items oi ON p.id = oi.product_id
                JOIN orders o ON oi.order_id = o.id
                WHERE o.status != 'cancelled'
                GROUP BY p.id, p.name
                ORDER BY revenue DESC
                LIMIT 10
            ''')
            
            analytics_text = "üì¶ <b>–¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã—Ä—É—á–∫–µ</b>\n\n"
            for i, product in enumerate(top_products, 1):
                analytics_text += f"{i}. <b>{product[0]}</b>\n"
                analytics_text += f"   üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {product[1]} —à—Ç.\n"
                analytics_text += f"   üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(product[2])}\n\n"
            
            self.bot.send_message(chat_id, analytics_text)
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    def show_financial_analytics(self, chat_id):
        """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            from financial_reports import FinancialReportsManager
            finance = FinancialReportsManager(self.db)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = finance.calculate_business_metrics()
            
            analytics_text = "üí∞ <b>–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
            analytics_text += f"üí≥ CAC: {format_price(metrics['cac'])}\n"
            analytics_text += f"üíé CLV: {format_price(metrics['clv'])}\n"
            analytics_text += f"üìä CLV/CAC: {metrics['clv_cac_ratio']:.1f}\n"
            analytics_text += f"üõí –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_price(metrics['avg_order_value'])}\n"
            analytics_text += f"üìâ Churn rate: {metrics['churn_rate']:.1f}%\n"
            analytics_text += f"üí∞ MRR: {format_price(metrics['mrr'])}\n"
            
            self.bot.send_message(chat_id, analytics_text)
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
    
    def handle_finance_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        try:
            from financial_reports import FinancialReportsManager
            finance = FinancialReportsManager(self.db)
            
            # –ü–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            
            if data == 'finance_pl':
                report = finance.generate_profit_loss_report(start_date, end_date)
                formatted_report = finance.format_financial_report('profit_loss', report)
                self.bot.send_message(chat_id, formatted_report)
            
            elif data == 'finance_cashflow':
                report = finance.generate_cash_flow_report(start_date, end_date)
                formatted_report = finance.format_financial_report('cash_flow', report)
                self.bot.send_message(chat_id, formatted_report)
            
            elif data == 'finance_tax':
                report = finance.generate_tax_report(start_date, end_date)
                formatted_report = finance.format_financial_report('tax', report)
                self.bot.send_message(chat_id, formatted_report)
            
            elif data == 'finance_roi':
                roi_data = finance.generate_roi_analysis()
                
                roi_text = "üìà <b>ROI –∞–Ω–∞–ª–∏–∑</b>\n\n"
                
                if roi_data['category_roi']:
                    roi_text += "üè∑ <b>ROI –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
                    for category in roi_data['category_roi'][:5]:
                        roi_text += f"{category[1]} {category[0]}: {category[4]:.1f}%\n"
                
                self.bot.send_message(chat_id, roi_text)
            
            elif data == 'finance_export':
                csv_data = finance.export_financial_data_csv('transactions', start_date, end_date)
                self.bot.send_message(chat_id, "üìä CSV –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def handle_inventory_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        try:
            from inventory_management import InventoryManager
            inventory = InventoryManager(self.db)
            
            if data == 'inventory_summary':
                report = inventory.get_inventory_report('summary')
                formatted_report = inventory.format_inventory_report('summary', report)
                self.bot.send_message(chat_id, formatted_report)
            
            elif data == 'inventory_abc':
                report = inventory.get_inventory_report('abc_analysis')
                formatted_report = inventory.format_inventory_report('abc_analysis', report)
                self.bot.send_message(chat_id, formatted_report)
            
            elif data == 'inventory_turnover':
                report = inventory.get_inventory_report('turnover')
                formatted_report = inventory.format_inventory_report('turnover', report)
                self.bot.send_message(chat_id, formatted_report)
            
            elif data == 'inventory_low_stock':
                stock_levels = inventory.check_stock_levels()
                
                stock_text = "‚ö†Ô∏è <b>–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏</b>\n\n"
                
                if stock_levels['critical']:
                    stock_text += "üî¥ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (0 —à—Ç.):</b>\n"
                    for product in stock_levels['critical']:
                        stock_text += f"‚Ä¢ {product[1]}\n"
                    stock_text += "\n"
                
                if stock_levels['low']:
                    stock_text += "üü° <b>–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (‚â§5 —à—Ç.):</b>\n"
                    for product in stock_levels['low']:
                        stock_text += f"‚Ä¢ {product[1]} - {product[2]} —à—Ç.\n"
                
                if not stock_levels['critical'] and not stock_levels['low']:
                    stock_text += "‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏"
                
                self.bot.send_message(chat_id, stock_text)
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def handle_ai_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        try:
            from ai_features import AIRecommendationEngine, ChatbotSupport
            
            if data == 'ai_recommendations':
                ai_engine = AIRecommendationEngine(self.db)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                ai_text = "üéØ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</b>\n\n"
                ai_text += "üìä –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                ai_text += "ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º—ã: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ, –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ, —Å–µ–∑–æ–Ω–Ω—ã–µ\n"
                ai_text += "üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: ~25-40%"
                
                self.bot.send_message(chat_id, ai_text)
            
            elif data == 'ai_support_stats':
                support = ChatbotSupport(self.db)
                
                support_text = "üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
                support_text += "ü§ñ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                support_text += "üìö –¢–µ–º—ã: –¥–æ—Å—Ç–∞–≤–∫–∞, –æ–ø–ª–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—Ç, —Ä–∞–∑–º–µ—Ä—ã, –≥–∞—Ä–∞–Ω—Ç–∏—è\n"
                support_text += "üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫\n"
                support_text += "üí° –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"
                
                self.bot.send_message(chat_id, support_text)
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ AI –º–æ–¥—É–ª—è: {e}")
    
    def handle_automation_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        try:
            from marketing_automation import MarketingAutomationManager
            
            if data == 'auto_abandoned_cart':
                automation_text = "üõí <b>–ë—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã</b>\n\n"
                automation_text += "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n"
                automation_text += "1Ô∏è‚É£ –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                automation_text += "2Ô∏è‚É£ –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ - —Å–∫–∏–¥–∫–∞ 10%\n"
                automation_text += "3Ô∏è‚É£ –ß–µ—Ä–µ–∑ 72 —á–∞—Å–∞ - —Å–∫–∏–¥–∫–∞ 15%\n\n"
                automation_text += "üìä –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                
                self.bot.send_message(chat_id, automation_text)
            
            elif data == 'auto_stats':
                automation_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</b>\n\n"
                automation_text += "üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
                automation_text += "‚Ä¢ –ë—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã\n"
                automation_text += "‚Ä¢ –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n"
                automation_text += "‚Ä¢ VIP —Å—Ç–∞—Ç—É—Å\n"
                automation_text += "‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏\n\n"
                automation_text += "üìà –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ 80% –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
                
                self.bot.send_message(chat_id, automation_text)
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
    
    def handle_crm_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CRM –∑–∞–ø—Ä–æ—Å–æ–≤"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        try:
            from crm import CRMManager
            crm = CRMManager(self.db)
            
            if data == 'crm_segmentation':
                segments = crm.segment_customers()
                
                crm_text = "üéØ <b>RFM —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
                
                segment_names = {
                    'champions': 'üèÜ –ß–µ–º–ø–∏–æ–Ω—ã',
                    'loyal': 'üíé –õ–æ—è–ª—å–Ω—ã–µ',
                    'potential': 'üåü –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ',
                    'new': 'üÜï –ù–æ–≤—ã–µ',
                    'need_attention': '‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è',
                    'at_risk': 'üö® –í –∑–æ–Ω–µ —Ä–∏—Å–∫–∞',
                    'hibernating': 'üò¥ –°–ø—è—â–∏–µ',
                    'lost': 'üíî –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ'
                }
                
                for segment_key, customers in segments.items():
                    if customers:
                        segment_name = segment_names.get(segment_key, segment_key)
                        crm_text += f"{segment_name}: {len(customers)} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                
                self.bot.send_message(chat_id, crm_text)
            
            elif data == 'crm_churn_risk':
                at_risk = crm.get_churn_risk_customers()
                
                risk_text = "‚ö†Ô∏è <b>–ö–ª–∏–µ–Ω—Ç—ã –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞</b>\n\n"
                
                if at_risk:
                    risk_text += f"üö® –ù–∞–π–¥–µ–Ω–æ {len(at_risk)} –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
                    for customer in at_risk[:5]:
                        risk_text += f"üë§ {customer[1]}\n"
                        risk_text += f"   üí∞ –ü–æ—Ç—Ä–∞—Ç–∏–ª: {format_price(customer[6])}\n"
                        risk_text += f"   üìÖ –î–Ω–µ–π –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤: {int(customer[4])}\n\n"
                else:
                    risk_text += "‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                
                self.bot.send_message(chat_id, risk_text)
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ CRM –º–æ–¥—É–ª—è: {e}")
    
    def handle_broadcast_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        if data == 'broadcast_stats':
            broadcast_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            broadcast_text += "üì¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            broadcast_text += "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∞–º\n"
            broadcast_text += "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö\n"
            broadcast_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            broadcast_text += "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–∑–∏–Ω–µ\n\n"
            broadcast_text += "üéØ –¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            
            self.bot.send_message(chat_id, broadcast_text)
        elif data == 'broadcast_all':
            self.start_broadcast_creation(chat_id, 'all')
        elif data == 'broadcast_segments':
            self.show_segment_selection(chat_id)
        elif data == 'broadcast_templates':
            self.show_broadcast_templates(chat_id)
    
    def handle_security_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        try:
            if data == 'security_logs':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                security_logs = self.db.execute_query('''
                    SELECT activity_type, details, severity, created_at
                    FROM security_logs
                    ORDER BY created_at DESC
                    LIMIT 10
                ''')
                
                security_text = "üö® <b>–õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                
                if security_logs:
                    for log in security_logs:
                        severity_emoji = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(log[2], '‚ö™')
                        security_text += f"{severity_emoji} <b>{log[0]}</b>\n"
                        if log[1]:
                            security_text += f"   {log[1][:50]}...\n"
                        security_text += f"   üìÖ {format_date(log[3])}\n\n"
                else:
                    security_text += "‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
                
                self.bot.send_message(chat_id, security_text)
            
            elif data == 'security_blocked':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                blocked_users = self.db.execute_query('''
                    SELECT u.name, u.telegram_id, sb.reason, sb.blocked_until
                    FROM security_blocks sb
                    JOIN users u ON sb.user_id = u.id
                    WHERE sb.blocked_until > datetime('now')
                    ORDER BY sb.created_at DESC
                ''')
                
                blocked_text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
                
                if blocked_users:
                    for user in blocked_users:
                        blocked_text += f"üë§ <b>{user[0]}</b> (ID: {user[1]})\n"
                        blocked_text += f"   üìã –ü—Ä–∏—á–∏–Ω–∞: {user[2]}\n"
                        blocked_text += f"   ‚è∞ –î–æ: {format_date(user[3])}\n\n"
                else:
                    blocked_text += "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"
                
                self.bot.send_message(chat_id, blocked_text)
            
            elif data == 'security_stats':
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                stats_text += "üõ° –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞\n"
                stats_text += "üö´ Rate limiting: 20 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω\n"
                stats_text += "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                stats_text += "üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n"
                stats_text += "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
                
                self.bot.send_message(chat_id, stats_text)
            
            elif data == 'security_settings':
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                settings_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                settings_text += "üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                settings_text += "‚Ä¢ Rate limit: 20 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω\n"
                settings_text += "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: 24 —á–∞—Å–∞\n"
                settings_text += "‚Ä¢ –ê–Ω—Ç–∏-—Å–ø–∞–º: –≤–∫–ª—é—á–µ–Ω\n"
                settings_text += "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–ª–Ω–æ–µ\n\n"
                settings_text += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                
                self.bot.send_message(chat_id, settings_text)
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
    
    def handle_export_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        try:
            if data == 'export_orders':
                export_text = "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
                export_text += "üìã –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É:\n"
                export_text += "‚Ä¢ –í—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
                export_text += "‚Ä¢ –î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                export_text += "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –∏ —Å—É–º–º—ã\n\n"
                export_text += "üíæ –§–æ—Ä–º–∞—Ç: CSV –¥–ª—è Excel"
                
                self.bot.send_message(chat_id, export_text)
            
            elif data == 'export_products':
                export_text = "üì¶ <b>–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                export_text += "üìã –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É:\n"
                export_text += "‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
                export_text += "‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ\n"
                export_text += "‚Ä¢ –¶–µ–Ω—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
                export_text += "üíæ –§–æ—Ä–º–∞—Ç: CSV –¥–ª—è Excel"
                
                self.bot.send_message(chat_id, export_text)
            
            elif data == 'export_customers':
                export_text = "üë• <b>–≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
                export_text += "üìã –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É:\n"
                export_text += "‚Ä¢ –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
                export_text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫\n"
                export_text += "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
                export_text += "üíæ –§–æ—Ä–º–∞—Ç: CSV –¥–ª—è Excel"
                
                self.bot.send_message(chat_id, export_text)
                
        except Exception as e:
            self.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def start_broadcast_creation(self, chat_id, target_type):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        broadcast_text = f"üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        broadcast_text += f"üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target_type}\n\n"
        broadcast_text += f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
        
        self.bot.send_message(chat_id, broadcast_text)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        telegram_id = self.get_telegram_id_from_chat(chat_id)
        if telegram_id:
            self.admin_states[telegram_id] = f'creating_broadcast_{target_type}'
    
    def show_segment_selection(self, chat_id):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        segments_text = "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', 'callback_data': 'broadcast_segment_new'},
                    {'text': 'üíé –õ–æ—è–ª—å–Ω—ã–µ', 'callback_data': 'broadcast_segment_loyal'}
                ],
                [
                    {'text': 'üèÜ VIP –∫–ª–∏–µ–Ω—Ç—ã', 'callback_data': 'broadcast_segment_vip'},
                    {'text': 'üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ', 'callback_data': 'broadcast_segment_inactive'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_back'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, segments_text, reply_markup=keyboard)
    
    def show_broadcast_templates(self, chat_id):
        """–ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        templates_text = "üìù <b>–®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        templates_text += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n"
        templates_text += "‚Ä¢ üéÅ –ü—Ä–æ–º–æ-–∞–∫—Ü–∏–∏\n"
        templates_text += "‚Ä¢ üì¶ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
        templates_text += "‚Ä¢ üîî –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        templates_text += "‚Ä¢ üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        templates_text += "üí° –®–∞–±–ª–æ–Ω—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        
        self.bot.send_message(chat_id, templates_text)
    
    def handle_broadcast_creation(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        state = self.admin_states.get(telegram_id, '')
        
        if state.startswith('creating_broadcast_'):
            target_type = state.split('_')[-1]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            if self.notification_manager:
                success_count, error_count = self.notification_manager.send_promotional_broadcast(
                    text, target_type
                )
                
                result_text = f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                result_text += f"üì§ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                result_text += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                result_text += f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {target_type}"
                
                self.bot.send_message(chat_id, result_text)
            else:
                self.bot.send_message(chat_id, "‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del self.admin_states[telegram_id]
    
    def get_telegram_id_from_chat(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ telegram_id –∏–∑ chat_id"""
        # –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ chat_id == telegram_id –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        return chat_id
    
    def handle_add_product_process(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        state = self.admin_states.get(telegram_id, '')
        
        if state == 'adding_product_name':
            self.admin_states[telegram_id] = f'adding_product_description:{text}'
            self.bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        
        elif state.startswith('adding_product_description:'):
            name = state.split(':', 1)[1]
            self.admin_states[telegram_id] = f'adding_product_price:{name}:{text}'
            self.bot.send_message(chat_id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
        
        elif state.startswith('adding_product_price:'):
            parts = state.split(':', 2)
            name = parts[1]
            description = parts[2]
            
            try:
                price = float(text)
                self.admin_states[telegram_id] = f'adding_product_category:{name}:{description}:{price}'
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories = self.db.get_categories()
                keyboard = {
                    'inline_keyboard': []
                }
                
                for category in categories:
                    keyboard['inline_keyboard'].append([
                        {'text': f"{category[3]} {category[1]}", 'callback_data': f'select_category_{category[0]}'}
                    ])
                
                self.bot.send_message(chat_id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
                
            except ValueError:
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        
        elif state.startswith('adding_product_stock:'):
            parts = state.split(':', 4)
            name, description, price, category_id = parts[1], parts[2], float(parts[3]), int(parts[4])
            
            try:
                stock = int(text)
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                product_id = self.db.execute_query('''
                    INSERT INTO products (name, description, price, category_id, stock, is_active, created_at)
                    VALUES (?, ?, ?, ?, ?, 1, CURRENT_TIMESTAMP)
                ''', (name, description, price, category_id, stock))
                
                if product_id:
                    success_text = f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                    success_text += f"üõç –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                    success_text += f"üí∞ –¶–µ–Ω–∞: {format_price(price)}\n"
                    success_text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stock} —à—Ç.\n"
                    success_text += f"üÜî ID: {product_id}"
                    
                    self.bot.send_message(chat_id, success_text)
                else:
                    self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.admin_states[telegram_id]
                
            except ValueError:
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    
    def handle_product_commands(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        if text.startswith('/edit_product_'):
            try:
                product_id = int(text.split('_')[-1])
                self.show_product_edit_menu(chat_id, product_id)
            except ValueError:
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
        
        elif text.startswith('/delete_product_'):
            try:
                product_id = int(text.split('_')[-1])
                self.confirm_product_deletion(chat_id, product_id)
            except ValueError:
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
    
    def show_product_edit_menu(self, chat_id, product_id):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        product = self.db.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        edit_text = f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        edit_text += f"üõç <b>{product[1]}</b>\n"
        edit_text += f"üí∞ –¶–µ–Ω–∞: {format_price(product[3])}\n"
        edit_text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {product[6]} —à—Ç.\n"
        edit_text += f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if product[8] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        edit_text += f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üí∞ –¶–µ–Ω—É', 'callback_data': f'edit_price_{product_id}'},
                    {'text': 'üì¶ –û—Å—Ç–∞—Ç–æ–∫', 'callback_data': f'edit_stock_{product_id}'}
                ],
                [
                    {'text': 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', 'callback_data': f'edit_description_{product_id}'},
                    {'text': 'üîÑ –°—Ç–∞—Ç—É—Å', 'callback_data': f'toggle_status_{product_id}'}
                ],
                [
                    {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'admin_products'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, edit_text, reply_markup=keyboard)
    
    def confirm_product_deletion(self, chat_id, product_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        product = self.db.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        confirm_text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        confirm_text += f"üõç –¢–æ–≤–∞—Ä: <b>{product[1]}</b>\n"
        confirm_text += f"üí∞ –¶–µ–Ω–∞: {format_price(product[3])}\n\n"
        confirm_text += f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'callback_data': f'confirm_delete_{product_id}'},
                    {'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'admin_products'}
                ]
            ]
        }
        
        self.bot.send_message(chat_id, confirm_text, reply_markup=keyboard)
    
    def handle_order_management(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        if text.startswith('/admin_order_'):
            try:
                order_id = int(text.split('_')[-1])
                self.show_detailed_order_info(chat_id, order_id)
            except ValueError:
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
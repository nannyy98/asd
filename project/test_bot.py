#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import sqlite3
import os

def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    if not os.path.exists('shop_bot.db'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        conn = sqlite3.connect('shop_bot.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute('SELECT id, name, emoji FROM categories')
        categories = cursor.fetchall()
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}):")
        for cat in categories:
            print(f"   ID: {cat[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{cat[1]}', –≠–º–æ–¥–∑–∏: '{cat[2]}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
        cursor.execute('SELECT id, name, price, category_id, stock, is_active FROM products')
        products = cursor.fetchall()
        print(f"\n‚úÖ –¢–æ–≤–∞—Ä—ã ({len(products)}):")
        for prod in products[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   ID: {prod[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{prod[1]}', –¶–µ–Ω–∞: ${prod[2]}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {prod[3]}, –û—Å—Ç–∞—Ç–æ–∫: {prod[4]}, –ê–∫—Ç–∏–≤–µ–Ω: {prod[5]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        cursor.execute('SELECT telegram_id, name, is_admin FROM users WHERE is_admin = 1')
        admins = cursor.fetchall()
        print(f"\n‚úÖ –ê–¥–º–∏–Ω—ã ({len(admins)}):")
        for admin in admins:
            print(f"   Telegram ID: {admin[0]}, –ò–º—è: '{admin[1]}'")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã: {e}")
        return False

def test_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    if len(token) < 40:
        print("‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return False
    
    if ':' not in token:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
        return False
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...{token[-10:]}")
    return True

def test_admin_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞"""
    print("\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞...")
    
    admin_id = os.getenv('ADMIN_TELEGRAM_ID')
    admin_name = os.getenv('ADMIN_NAME', 'Admin')
    
    if not admin_id:
        print("‚ùå ADMIN_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        admin_id = int(admin_id)
        print(f"‚úÖ –ê–¥–º–∏–Ω ID: {admin_id}")
        print(f"‚úÖ –ê–¥–º–∏–Ω –∏–º—è: {admin_name}")
        return True
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_TELEGRAM_ID: {admin_id}")
        return False

def fix_common_issues():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º...")
    
    try:
        conn = sqlite3.connect('shop_bot.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('SELECT COUNT(*) FROM products WHERE category_id IS NULL')
        orphan_products = cursor.fetchone()[0]
        
        if orphan_products > 0:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {orphan_products} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            cursor.execute('UPDATE products SET category_id = 1 WHERE category_id IS NULL')
            print("‚úÖ –¢–æ–≤–∞—Ä—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('SELECT COUNT(*) FROM products WHERE is_active = 0')
        inactive_products = cursor.fetchone()[0]
        
        if inactive_products > 0:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {inactive_products} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            cursor.execute('UPDATE products SET is_active = 1')
            print("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('SELECT COUNT(*) FROM products WHERE stock <= 0')
        out_of_stock = cursor.fetchone()[0]
        
        if out_of_stock > 0:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {out_of_stock} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞")
            cursor.execute('UPDATE products SET stock = 10 WHERE stock <= 0')
            print("‚úÖ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_token,
        test_admin_config,
        test_database,
        fix_common_issues
    ]
    
    passed = 0
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(tests):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")

if __name__ == "__main__":
    main()
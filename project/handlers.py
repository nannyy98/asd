"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

import os
import time
import threading
from keyboards import *
from utils import *
from localization import t, get_user_language

class MessageHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.user_states = {}
        self.notification_manager = None
        self.payment_processor = None
        self.data_monitor_running = False
        self.start_data_monitor()
    
    def start_data_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.data_monitor_running:
            return
            
        def monitor_worker():
            while True:
                try:
                    self.check_data_updates()
                    time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    time.sleep(30)
        
        monitor_thread = threading.Thread(target=monitor_worker, daemon=True)
        monitor_thread.start()
        self.data_monitor_running = True
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
    
    def check_data_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        update_flag = 'data_update_flag.txt'
        force_flag = 'force_reload_flag.txt'
        
        if os.path.exists(force_flag):
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.reload_all_data()
            try:
                os.remove(force_flag)
            except:
                pass
        elif os.path.exists(update_flag):
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            self.reload_cached_data()
            try:
                os.remove(update_flag)
            except:
                pass
    
    def reload_all_data(self):
        """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            if hasattr(self.bot, 'data_cache'):
                self.bot.data_cache.clear()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç—ã
            if hasattr(self.bot, 'scheduled_posts') and self.bot.scheduled_posts:
                self.bot.scheduled_posts.load_schedule_from_database()
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def reload_cached_data(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
            if hasattr(self.bot, 'data_cache'):
                self.bot.data_cache['categories'] = self.db.get_categories()
                self.bot.data_cache['products'] = self.db.execute_query(
                    'SELECT * FROM products WHERE is_active = 1'
                )
            
            print("‚úÖ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def handle_message(self, message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            log_user_action(telegram_id, 'message', text[:50])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if not user_data:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                self.start_registration(message)
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = self.user_states.get(telegram_id, '')
            
            if user_state.startswith('registration_'):
                self.handle_registration(message, user_state)
            elif user_state.startswith('search_'):
                self.handle_search_process(message)
            elif user_state.startswith('review_'):
                self.handle_review_process(message)
            elif user_state.startswith('order_'):
                self.handle_order_process(message)
            elif text == '/start':
                self.handle_start_command(message)
            elif text == '/help' or text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
                self.handle_help_command(message)
            elif text == 'üõç –ö–∞—Ç–∞–ª–æ–≥':
                self.show_categories(message)
            elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
                self.show_cart(message)
            elif text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                self.show_user_orders(message)
            elif text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                self.show_user_profile(message)
            elif text == 'üîç –ü–æ–∏—Å–∫':
                self.start_search(message)
            elif text.startswith('üì±') or text.startswith('üëï') or text.startswith('üè†'):
                self.handle_category_selection(message)
            elif text.startswith('üçé') or text.startswith('‚úîÔ∏è') or text.startswith('üëñ') or text.startswith('‚òï') or text.startswith('üëü') or text.startswith('üíé'):
                self.handle_subcategory_selection(message)
            elif text.startswith('üõç'):
                self.handle_product_selection(message)
            elif text == 'üîô –ù–∞–∑–∞–¥' or text == 'üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
                self.show_categories(message)
            elif text == 'üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
                self.show_categories(message)
            elif text == 'üè† –ì–ª–∞–≤–Ω–∞—è':
                self.show_main_menu(message)
            elif text.startswith('/order_'):
                self.show_order_details(message)
            elif text.startswith('/track_'):
                self.handle_tracking(message)
            elif text.startswith('/promo_'):
                self.handle_promo_code(message)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                self.handle_search_query(message, text)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.send_error_message(chat_id, language if 'language' in locals() else 'ru')
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            message_id = callback_query['message']['message_id']
            telegram_id = callback_query['from']['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            
            if data.startswith('add_to_cart_'):
                product_id = int(data.split('_')[3])
                self.add_product_to_cart(callback_query, product_id)
            elif data.startswith('cart_increase_'):
                cart_item_id = int(data.split('_')[2])
                self.update_cart_quantity(callback_query, cart_item_id, 1)
            elif data.startswith('cart_decrease_'):
                cart_item_id = int(data.split('_')[2])
                self.update_cart_quantity(callback_query, cart_item_id, -1)
            elif data.startswith('cart_remove_'):
                cart_item_id = int(data.split('_')[2])
                self.remove_from_cart(callback_query, cart_item_id)
            elif data.startswith('rate_'):
                parts = data.split('_')
                product_id = int(parts[1])
                rating = int(parts[2])
                self.handle_product_rating(callback_query, product_id, rating)
            elif data.startswith('add_to_favorites_'):
                product_id = int(data.split('_')[3])
                self.add_to_favorites(callback_query, product_id)
            elif data.startswith('pay_'):
                self.handle_payment_selection(callback_query)
            elif data == 'show_cart':
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã
                fake_message = {
                    'chat': {'id': chat_id},
                    'from': {'id': telegram_id}
                }
                self.show_cart(fake_message)
            elif data == 'continue_shopping':
                fake_message = {
                    'chat': {'id': chat_id},
                    'from': {'id': telegram_id}
                }
                self.show_categories(fake_message)
            else:
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                self.answer_callback_query(callback_query['id'], "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    def answer_callback_query(self, callback_query_id, text=""):
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        try:
            import urllib.request
            import urllib.parse
            import json
            
            url = f"{self.bot.base_url}/answerCallbackQuery"
            data = {
                'callback_query_id': callback_query_id,
                'text': text
            }
            
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                return result.get('ok', False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
            return False
    
    def start_registration(self, message):
        """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ Telegram
            first_name = message['from'].get('first_name', '')
            last_name = message['from'].get('last_name', '')
            suggested_name = f"{first_name} {last_name}".strip()
            
            self.user_states[telegram_id] = 'registration_name'
            
            welcome_text = """üõç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!</b>

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

üë§ <b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>"""
            
            keyboard = create_registration_keyboard('name', suggested_name)
            self.bot.send_message(chat_id, welcome_text, keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    def handle_registration(self, message, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            if text == '‚ùå –û—Ç–º–µ–Ω–∞':
                self.user_states.pop(telegram_id, None)
                self.bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.")
                return
            
            if state == 'registration_name':
                if len(text) < 2:
                    self.bot.send_message(chat_id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                
                self.user_states[telegram_id] = f'registration_phone_{text}'
                
                phone_text = """üì± <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ –∑–∞–∫–∞–∑—É."""
                
                keyboard = create_registration_keyboard('phone')
                self.bot.send_message(chat_id, phone_text, keyboard)
            
            elif state.startswith('registration_phone_'):
                name = state.split('_', 2)[2]
                phone = None
                
                if text != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                    if 'contact' in message:
                        phone = message['contact']['phone_number']
                    else:
                        phone = validate_phone(text)
                        if not phone:
                            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
                            return
                
                self.user_states[telegram_id] = f'registration_email_{name}_{phone or ""}'
                
                email_text = """üìß <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email</b>

–ë—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö."""
                
                keyboard = create_registration_keyboard('email')
                self.bot.send_message(chat_id, email_text, keyboard)
            
            elif state.startswith('registration_email_'):
                parts = state.split('_', 3)
                name = parts[2]
                phone = parts[3] if len(parts) > 3 and parts[3] else None
                email = None
                
                if text != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                    if validate_email(text):
                        email = text
                    else:
                        self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
                        return
                
                self.user_states[telegram_id] = f'registration_language_{name}_{phone or ""}_{email or ""}'
                
                language_text = """üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
                
                keyboard = create_registration_keyboard('language')
                self.bot.send_message(chat_id, language_text, keyboard)
            
            elif state.startswith('registration_language_'):
                parts = state.split('_', 4)
                name = parts[2]
                phone = parts[3] if len(parts) > 3 and parts[3] else None
                email = parts[4] if len(parts) > 4 and parts[4] else None
                
                language = 'ru'
                if text == 'üá∫üáø O\'zbekcha':
                    language = 'uz'
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = self.db.add_user(telegram_id, name, phone, email, language)
                
                if user_id:
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self.user_states.pop(telegram_id, None)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
                    self.db.execute_query(
                        'INSERT OR IGNORE INTO loyalty_points (user_id) VALUES (?)',
                        (user_id,)
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                    welcome_text = t('registration_complete', language=language)
                    keyboard = create_main_keyboard()
                    self.bot.send_message(chat_id, welcome_text, keyboard)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é
                    if hasattr(self.bot, 'marketing_automation') and self.bot.marketing_automation:
                        self.bot.marketing_automation.create_welcome_series(user_id)
                else:
                    self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    def handle_start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if user_data:
                language = user_data[0][5]
                welcome_text = t('welcome_back', language=language)
                keyboard = create_main_keyboard()
                self.bot.send_message(chat_id, welcome_text, keyboard)
            else:
                self.start_registration(message)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start: {e}")
    
    def handle_help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            language = user_data[0][5] if user_data else 'ru'
            
            help_text = """‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

üõç <b>–ö–∞—Ç–∞–ª–æ–≥</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
üõí <b>–ö–æ—Ä–∑–∏–Ω–∞</b> - –≤–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
üìã <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b> - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏

<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑
4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
            
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, help_text, keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã help: {e}")
    
    def show_categories(self, message):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            chat_id = message['chat']['id']
            
            categories = self.db.get_categories()
            
            if categories:
                text = "üõç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>"
                keyboard = create_categories_keyboard(categories)
                self.bot.send_message(chat_id, text, keyboard)
            else:
                self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
    
    def handle_category_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_name = text.split(' ', 1)[1] if ' ' in text else text
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            categories = self.db.get_categories()
            category_id = None
            
            for category in categories:
                if category[1] == category_name:
                    category_id = category[0]
                    break
            
            if category_id:
                self.show_subcategories_by_category(message, category_id)
            else:
                self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    
    def show_subcategories_by_category(self, message, category_id):
        """–ü–æ–∫–∞–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            chat_id = message['chat']['id']
            
            subcategories = self.db.get_products_by_category(category_id)
            
            if subcategories:
                text = "üè∑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>"
                keyboard = create_subcategories_keyboard(subcategories)
                self.bot.send_message(chat_id, text, keyboard)
            else:
                self.bot.send_message(chat_id, "‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
    
    def handle_subcategory_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥–∞"""
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategory_name = text.split(' ', 1)[1] if ' ' in text else text
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            subcategories = self.db.execute_query(
                'SELECT id FROM subcategories WHERE name = ? AND is_active = 1',
                (subcategory_name,)
            )
            
            if subcategories:
                subcategory_id = subcategories[0][0]
                self.show_products_by_subcategory(message, subcategory_id)
            else:
                self.bot.send_message(chat_id, "‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    
    def show_products_by_subcategory(self, message, subcategory_id, page=1):
        """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            chat_id = message['chat']['id']
            
            products = self.db.get_products_by_subcategory(subcategory_id, limit=5, offset=(page-1)*5)
            
            if products:
                for product in products:
                    self.show_product_card(chat_id, product)
            else:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    
    def show_product_card(self, chat_id, product):
        """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            product_id = product[0]
            name = product[1]
            description = product[2]
            price = product[3]
            image_url = product[5]
            stock = product[6]
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            self.db.increment_product_views(product_id)
            
            card_text = create_product_card(product)
            keyboard = create_product_inline_keyboard(product_id)
            
            if image_url:
                self.bot.send_photo(chat_id, image_url, card_text, keyboard)
            else:
                self.bot.send_message(chat_id, card_text, keyboard)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
    
    def show_cart(self, message):
        """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            cart_items = self.db.get_cart_items(user_id)
            
            if not cart_items:
                empty_text = t('empty_cart', language=language)
                keyboard = create_cart_keyboard(False)
                self.bot.send_message(chat_id, empty_text, keyboard)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
            total_amount = 0
            
            for item in cart_items:
                item_total = item[2] * item[3]
                total_amount += item_total
                
                cart_text += f"üõç <b>{item[1]}</b>\n"
                cart_text += f"üí∞ {format_price(item[2])} √ó {item[3]} = {format_price(item_total)}\n\n"
            
            cart_text += f"üí≥ <b>–ò—Ç–æ–≥–æ: {format_price(total_amount)}</b>"
            
            keyboard = create_cart_keyboard(True)
            self.bot.send_message(chat_id, cart_text, keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–º —Ç–æ–≤–∞—Ä–æ–º
            for item in cart_items:
                item_text = f"üõç <b>{item[1]}</b>\n"
                item_text += f"üí∞ {format_price(item[2])} √ó {item[3]} = {format_price(item[2] * item[3])}"
                
                item_keyboard = create_cart_item_keyboard(item[0], item[3])
                self.bot.send_message(chat_id, item_text, item_keyboard)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    
    def show_user_orders(self, message):
        """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            orders = self.db.get_user_orders(user_id)
            
            if not orders:
                self.bot.send_message(chat_id, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
                return
            
            orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            
            for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                status_emoji = get_order_status_emoji(order[3])
                orders_text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n"
                orders_text += f"üí∞ {format_price(order[2])}\n"
                orders_text += f"üìÖ {format_date(order[9])}\n"
                orders_text += f"üìã {get_order_status_text(order[3])}\n\n"
            
            keyboard = create_back_keyboard()
            self.bot.send_message(chat_id, orders_text, keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    def show_user_profile(self, message):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user = user_data[0]
            
            profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            profile_text += f"üìù –ò–º—è: {user[2]}\n"
            
            if user[3]:
                profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[3]}\n"
            if user[4]:
                profile_text += f"üìß Email: {user[4]}\n"
            
            profile_text += f"üåç –Ø–∑—ã–∫: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if user[5] == 'ru' else 'üá∫üáø O\'zbekcha'}\n"
            profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_date(user[7])}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            orders_stats = self.db.execute_query('''
                SELECT COUNT(*), COALESCE(SUM(total_amount), 0)
                FROM orders WHERE user_id = ? AND status != 'cancelled'
            ''', (user[0],))
            
            if orders_stats:
                profile_text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                profile_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {orders_stats[0][0]}\n"
                profile_text += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_price(orders_stats[0][1])}\n"
            
            keyboard = create_back_keyboard()
            self.bot.send_message(chat_id, profile_text, keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    def start_search(self, message):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            self.user_states[telegram_id] = 'search_query'
            
            search_text = """üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:"""
            
            keyboard = create_back_keyboard()
            self.bot.send_message(chat_id, search_text, keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def handle_search_query(self, message, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if user_data:
                user_id = user_data[0][0]
                self.db.execute_query(
                    'INSERT INTO user_activity_logs (user_id, action, search_query) VALUES (?, ?, ?)',
                    (user_id, 'search', query)
                )
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
            products = self.db.search_products(query, limit=10)
            
            if products:
                search_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':</b>\n\n"
                search_text += f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤:"
                
                self.bot.send_message(chat_id, search_text)
                
                for product in products:
                    self.show_product_card(chat_id, product)
            else:
                not_found_text = f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                not_found_text += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                not_found_text += "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                not_found_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                not_found_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥"
                
                self.bot.send_message(chat_id, not_found_text)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def add_product_to_cart(self, callback_query, product_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        try:
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            existing_cart = self.db.execute_query(
                'SELECT id, quantity FROM cart WHERE user_id = ? AND product_id = ?',
                (user_id, product_id)
            )
            
            result = self.db.add_to_cart(user_id, product_id, 1)
            
            if result:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                cart_items = self.db.get_cart_items(user_id)
                cart_count = sum(item[3] for item in cart_items) if cart_items else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                current_item = self.db.execute_query(
                    'SELECT quantity FROM cart WHERE user_id = ? AND product_id = ?',
                    (user_id, product_id)
                )
                item_quantity = current_item[0][0] if current_item else 1
                
                product = self.db.get_product_by_id(product_id)
                success_text = f"‚úÖ <b>{product[1]}</b>\n\n"
                success_text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_quantity} —à—Ç.\n"
                success_text += f"üõí –í—Å–µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart_count} —Ç–æ–≤–∞—Ä(–æ–≤)"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                keyboard = {
                    'inline_keyboard': [
                        [
                            {'text': 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data': 'go_to_cart'},
                            {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', 'callback_data': f'add_to_cart_{product_id}'}
                        ],
                        [
                            {'text': 'üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', 'callback_data': 'continue_shopping'}
                        ]
                    ]
                }
                
                self.bot.send_message(chat_id, success_text, keyboard)
            else:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
    
    def update_cart_quantity(self, callback_query, cart_item_id, change):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        try:
            chat_id = callback_query['message']['chat']['id']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cart_item = self.db.execute_query(
                'SELECT quantity FROM cart WHERE id = ?',
                (cart_item_id,)
            )
            
            if cart_item:
                current_quantity = cart_item[0][0]
                new_quantity = current_quantity + change
                
                if new_quantity <= 0:
                    self.db.remove_from_cart(cart_item_id)
                    self.bot.send_message(chat_id, "üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                    self.answer_callback_query(callback_query['id'], "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
                else:
                    self.db.update_cart_quantity(cart_item_id, new_quantity)
                    self.bot.send_message(chat_id, f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_quantity}")
                    self.answer_callback_query(callback_query['id'], f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_quantity}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
    
    def remove_from_cart(self, callback_query, cart_item_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            chat_id = callback_query['message']['chat']['id']
            
            result = self.db.remove_from_cart(cart_item_id)
            
            if result is not None:
                self.bot.send_message(chat_id, "üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                self.answer_callback_query(callback_query['id'], "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
                self.answer_callback_query(callback_query['id'], "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    
    def handle_product_rating(self, callback_query, product_id, rating):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
            result = self.db.add_review(user_id, product_id, rating, "")
            
            if result:
                stars = '‚≠ê' * rating
                self.bot.send_message(chat_id, f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! {stars}")
                self.answer_callback_query(callback_query['id'], f"–û—Ü–µ–Ω–∫–∞: {stars}")
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")
                self.answer_callback_query(callback_query['id'], "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
    
    def add_to_favorites(self, callback_query, product_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            result = self.db.add_to_favorites(user_id, product_id)
            
            if result:
                product = self.db.get_product_by_id(product_id)
                self.bot.send_message(chat_id, f"‚ù§Ô∏è <b>{product[1]}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
                self.answer_callback_query(callback_query['id'], "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            else:
                self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
                self.answer_callback_query(callback_query['id'], "–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
    
    def handle_payment_selection(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            chat_id = callback_query['message']['chat']['id']
            data = callback_query['data']
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
            parts = data.split('_')
            payment_method = parts[1]
            order_id = int(parts[2])
            
            if payment_method == 'cash':
                # –ù–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                self.db.execute_query(
                    'UPDATE orders SET payment_method = "cash", status = "confirmed" WHERE id = ?',
                    (order_id,)
                )
                
                success_text = "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                success_text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
                success_text += f"üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
                success_text += f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
                
                self.bot.send_message(chat_id, success_text)
                self.answer_callback_query(callback_query['id'], "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                if self.notification_manager:
                    self.notification_manager.send_order_notification_to_admins(order_id)
            else:
                # –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞
                amount = float(parts[3]) if len(parts) > 3 else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = self.db.get_user_by_telegram_id(callback_query['from']['id'])
                user_info = {
                    'telegram_id': callback_query['from']['id'],
                    'name': user_data[0][2] if user_data else '',
                    'phone': user_data[0][3] if user_data else '',
                    'email': user_data[0][4] if user_data else ''
                }
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                if self.payment_processor:
                    payment_result = self.payment_processor.create_payment(
                        payment_method, amount, order_id, user_info
                    )
                    
                    if payment_result:
                        from payments import format_payment_info
                        payment_text = format_payment_info(payment_result)
                        self.bot.send_message(chat_id, payment_text)
                        self.answer_callback_query(callback_query['id'], "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ")
                    else:
                        self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
                        self.answer_callback_query(callback_query['id'], "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    def show_main_menu(self, message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            language = user_data[0][5] if user_data else 'ru'
            
            welcome_text = t('welcome_back', language=language)
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, welcome_text, keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    def send_error_message(self, chat_id, language='ru'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            if language == 'uz':
                error_text = "‚ùå Xatolik yuz berdi. Keyinroq urinib ko'ring yoki administrator bilan bog'laning."
            
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, error_text, keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def handle_search_process(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            if text == 'üîô –ù–∞–∑–∞–¥':
                self.user_states.pop(telegram_id, None)
                self.show_main_menu(message)
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            self.handle_search_query(message, text)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states.pop(telegram_id, None)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def handle_review_process(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            state = self.user_states.get(telegram_id, '')
            
            if text == '‚ùå –û—Ç–º–µ–Ω–∞':
                self.user_states.pop(telegram_id, None)
                self.bot.send_message(chat_id, "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
            
            if state.startswith('review_comment_'):
                product_id = int(state.split('_')[2])
                rating = int(state.split('_')[3])
                
                user_data = self.db.get_user_by_telegram_id(telegram_id)
                if user_data:
                    user_id = user_data[0][0]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
                    result = self.db.add_review(user_id, product_id, rating, text)
                    
                    if result:
                        self.bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
                    else:
                        self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
                
                self.user_states.pop(telegram_id, None)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∑—ã–≤–∞: {e}")
    
    def handle_order_process(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            state = self.user_states.get(telegram_id, '')
            
            if text == '‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞':
                self.user_states.pop(telegram_id, None)
                self.bot.send_message(chat_id, "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return
            
            if state == 'order_address':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
                self.user_states[telegram_id] = f'order_payment_{text}'
                
                payment_text = "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>"
                
                keyboard = create_payment_methods_keyboard()
                self.bot.send_message(chat_id, payment_text, keyboard)
            
            elif state.startswith('order_payment_'):
                address = state.split('_', 2)[2]
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                user_data = self.db.get_user_by_telegram_id(telegram_id)
                if user_data:
                    user_id = user_data[0][0]
                    cart_items = self.db.get_cart_items(user_id)
                    
                    if cart_items:
                        total_amount = calculate_cart_total(cart_items)
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                        order_id = self.db.create_order(user_id, total_amount, address, text)
                        
                        if order_id:
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
                            self.db.add_order_items(order_id, cart_items)
                            
                            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                            self.db.clear_cart(user_id)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
                            if text == 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏':
                                self.db.execute_query(
                                    'UPDATE orders SET payment_method = "cash", status = "confirmed" WHERE id = ?',
                                    (order_id,)
                                )
                                
                                success_text = "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                                success_text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
                                success_text += f"üí∞ –°—É–º–º–∞: {format_price(total_amount)}\n"
                                success_text += f"üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
                                success_text += f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
                                
                                self.bot.send_message(chat_id, success_text)
                                
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                                if self.notification_manager:
                                    self.notification_manager.send_order_notification_to_admins(order_id)
                            else:
                                # –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞
                                from payments import create_payment_keyboard
                                payment_keyboard = create_payment_keyboard(order_id, total_amount)
                                
                                payment_text = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                                payment_text += f"üí∞ –°—É–º–º–∞: {format_price(total_amount)}\n\n"
                                payment_text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
                                
                                self.bot.send_message(chat_id, payment_text, payment_keyboard)
                        else:
                            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                
                self.user_states.pop(telegram_id, None)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
    
    def show_order_details(self, message):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            order_id = int(text.split('_')[1])
            order_details = self.db.get_order_details(order_id)
            
            if order_details:
                order = order_details['order']
                items = order_details['items']
                
                details_text = f"üì¶ <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
                details_text += f"üìÖ –î–∞—Ç–∞: {format_date(order[9])}\n"
                details_text += f"üí∞ –°—É–º–º–∞: {format_price(order[2])}\n"
                details_text += f"üìã –°—Ç–∞—Ç—É—Å: {get_order_status_text(order[3])}\n"
                
                if order[4]:
                    details_text += f"üìç –ê–¥—Ä–µ—Å: {order[4]}\n"
                
                details_text += f"\nüõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
                for item in items:
                    details_text += f"‚Ä¢ {item[2]} √ó {item[0]} = {format_price(item[1] * item[0])}\n"
                
                keyboard = create_order_details_keyboard(order_id)
                self.bot.send_message(chat_id, details_text, keyboard)
            else:
                self.bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
    
    def handle_tracking(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏"""
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            tracking_number = text.split('_')[1]
            
            if hasattr(self.bot, 'logistics_manager'):
                tracking_info = self.bot.logistics_manager.track_shipment(tracking_number)
                
                if tracking_info:
                    track_text = f"üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {tracking_number}</b>\n\n"
                    track_text += f"üìã –°—Ç–∞—Ç—É—Å: {tracking_info['current_status']}\n"
                    track_text += f"üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {format_date(tracking_info['estimated_delivery'])}\n\n"
                    track_text += f"üìç <b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n"
                    
                    for event in tracking_info['history']:
                        track_text += f"‚Ä¢ {event['description']} - {format_date(event['timestamp'])}\n"
                    
                    self.bot.send_message(chat_id, track_text)
                else:
                    self.bot.send_message(chat_id, "‚ùå –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                self.bot.send_message(chat_id, "‚ùå –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
    
    def handle_promo_code(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            promo_code = text.split('_')[1]
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            cart_items = self.db.get_cart_items(user_id)
            
            if not cart_items:
                self.bot.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
                return
            
            cart_total = calculate_cart_total(cart_items)
            
            if hasattr(self.bot, 'promotion_manager'):
                validation = self.bot.promotion_manager.validate_promo_code(promo_code, user_id, cart_total)
                
                if validation['valid']:
                    promo_text = f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\n"
                    promo_text += f"üè∑ –ö–æ–¥: {promo_code}\n"
                    promo_text += f"üí∞ –°–∫–∏–¥–∫–∞: {format_price(validation['discount_amount'])}\n"
                    promo_text += f"üìù {validation['description']}\n\n"
                    promo_text += f"üõí –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
                    
                    self.bot.send_message(chat_id, promo_text)
                else:
                    self.bot.send_message(chat_id, f"‚ùå {validation['error']}")
            else:
                self.bot.send_message(chat_id, "‚ùå –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
    
    def handle_product_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            if text.startswith('üõç '):
                product_info = text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                product_name = product_info.split(' - $')[0]  # –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É
                
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                products = self.db.search_products(product_name, limit=1)
                
                if products:
                    self.show_product_card(chat_id, products[0])
                else:
                    self.bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞: {e}")